{
	"info": {
		"_postman_id": "7246a1ee-2083-47b8-b296-071127fda804",
		"name": "CFS OAuth 2.0 and OpenID Connect",
		"description": "This postman collection is used to try out the **OpenID Connect feature of CFS**.\n\n## Pre-requisities\n\n- Configure an OpenID Connect Application in CFS.\n    - Go to **Administration -> Applications -> OpenID Connect**\n        \n        <img src=\"https://content.pstmn.io/8135220b-8129-4db7-b70d-5b14eac68332/aW1hZ2UucG5n\" width=\"1619\" height=\"924\">\n        \n    - Click the \"New OpenID Connect Application\" button\n    - Fill in the fields\n        \n        <img src=\"https://content.pstmn.io/0049d2a0-4d58-4d20-8bea-2588ef7d2a8d/aW1hZ2UucG5n\" width=\"1619\" height=\"924\">\n        \n    - For the Callback URL field, use the value: `https://oauth.pstmn.io/v1/callback`\n- Fill in the Postman Collection Variables with appropriate values for `CFS Master URL`, `Tenant Name`, `client_id`, `client_secret`, `username`, and `password` respectively.\n    \n    <img src=\"https://content.pstmn.io/79d7290f-e98b-48d5-b811-fa76f09c6da5/aW1hZ2UucG5n\" width=\"1619\" height=\"924\">\n    \n    <img src=\"https://content.pstmn.io/62a83ecf-0335-42c0-beb1-0e9abfc74501/aW1hZ2UucG5n\" width=\"1619\" height=\"924\">\n    \n\nNow you can test the OAuth requests directly in Postman.\n\n## Collection Variables\n\n| **Variable Name** | **Current Value** | **Description** |\n| --- | --- | --- |\n| CFS Master URL | {{CFS Master URL}} | The base URL for the CFS Master instance |\n| Tenant Name | {{Tenant Name}} | The name of the CFS tenant |\n| Application Id | {{Application Id}} | The application id used for the **Revoke Application Access** request |\n| username | {{username}} | The username used to log in to the CFS Master tenant's portal |\n| password | {{password}} | The password used to log in to the CFS Master tenant's portal |\n| client_id | {{client_id}} | The client identifier  <br>[https://datatracker.ietf.org/doc/html/rfc6749#section-2.2](https://datatracker.ietf.org/doc/html/rfc6749#section-2.2) |\n| client_secret | {{client_secret}} | The client secret  <br>[https://datatracker.ietf.org/doc/html/rfc6749#section-2.3.1](https://datatracker.ietf.org/doc/html/rfc6749#section-2.3.1) |\n| scope | {{scope}} | The space separated list of requested scopes  <br>[https://datatracker.ietf.org/doc/html/rfc6749#section-3.3](https://datatracker.ietf.org/doc/html/rfc6749#section-3.3) |\n| state | {{state}} | State parameter used for protection against CSRF  <br>[https://datatracker.ietf.org/doc/html/rfc6749#section-10.12](https://datatracker.ietf.org/doc/html/rfc6749#section-10.12) |\n| nonce | {{nonce}} | Nonce parameter used for protection agaisnt replay attacks  <br>[https://openid.net/specs/openid-connect-core-1_0.html#IDToken](https://openid.net/specs/openid-connect-core-1_0.html#IDToken) |\n| redirect_uri | {{redirect_uri}} | The callback URL configured for the OIDC Application  <br>[https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2) |\n| code_challenge | `{{code_challenge}}` | Code Challenge for PKCE  <br>[https://datatracker.ietf.org/doc/html/rfc7636#section-4.2](https://datatracker.ietf.org/doc/html/rfc7636#section-4.2) |\n| code_verifier | `{{code_verifier}}` | Code Verifier for PKCE  <br>[https://datatracker.ietf.org/doc/html/rfc7636#section-4.1](https://datatracker.ietf.org/doc/html/rfc7636#section-4.1) |\n| code_method | {{code_method}} | Code Challenge Method for PKCE  <br>[https://datatracker.ietf.org/doc/html/rfc7636#section-4.3](https://datatracker.ietf.org/doc/html/rfc7636#section-4.3) |\n| validations_common_response_type | {{validations_common_response_type}} | The response type to use for the requests in the **Validations -> Common** folder |\n| authorization_code | `{{authorization_code}}` | **This variable is managed by the Postman Collection itself, do not modify it manually!**  <br>  <br>The OAuth authorization code  <br>[https://datatracker.ietf.org/doc/html/rfc6749#section-1.3.1](https://datatracker.ietf.org/doc/html/rfc6749#section-1.3.1) |\n| id_token | `{{id_token}}` | **This variable is managed by the collection itself, do not modify it manually!**  <br>  <br>The OIDC Id token  <br>[https://openid.net/specs/openid-connect-core-1_0.html#TokenResponse](https://openid.net/specs/openid-connect-core-1_0.html#TokenResponse) |\n| access_token | `{{access_token}}` | **This variable is managed by the collection itself, do not modify it manually!**  <br>  <br>The OAuth acess token  <br>[https://datatracker.ietf.org/doc/html/rfc6749#section-5.1](https://datatracker.ietf.org/doc/html/rfc6749#section-5.1) |\n| refresh_token | `{{refresh_token}}` | **This variable is managed by the collection itself, do not modify it manually!**  <br>  <br>The OAuth refresh token  <br>[https://datatracker.ietf.org/doc/html/rfc6749#section-5.1](https://datatracker.ietf.org/doc/html/rfc6749#section-5.1) |\n\nThe \"Authorize\" requests will automatically set the values for the `authorization_code`, `id_token`, `access_token` collection variable(s), while the \"Request for tokens\" requests will automatically set the values for the `id_token`, `access_token`, and `refresh_token` collections variable(s) where appropriate.\n\n**N.B.:** The \"Automatically follow redirects\" setting must be **disabled** in Postman in order to run the requests in the \"[Implicit Flow](https://speeding-sunset-964902.postman.co/workspace/CFS5~8ebc958a-523b-46bd-931a-968060aa59a4/folder/25667693-0adeda1d-0730-496d-b6d8-79fd4cb9ee10?ctx=documentation)\" and \"[Hybrid Flow](https://speeding-sunset-964902.postman.co/workspace/CFS5~8ebc958a-523b-46bd-931a-968060aa59a4/folder/25667693-38b7714c-3ef1-4f1f-9f42-14ac1e5d6c0b?ctx=documentation)\" folders!\n\n<img src=\"https://content.pstmn.io/bb3aa626-370b-4bfc-88b9-b0daec95b702/aW1hZ2UucG5n\" width=\"846\" height=\"840\">\n\n## Tests\n\nAll requests contain tests to validate their respective responses. Most of the testing code is extracted to methods defined in the collection's Pre-request Script.\n\nSee the test results in the **Response -> Test Results** tab.\n\n### Authorize\n\nSee the response in `authorization_code`, `access_token`, `id_token`, in the **Response -> Body -> Visualize** tab.\n\nThe \"Authorize\" requests test the responses in the following ways:\n\n- Asserts that the response status code is 200 Ok or 302 Found\n    - If it's 200 Ok, it means we received CFS's consent screen, which will be automatically accepted by the test script, but in a real world scenario the user will have to accept/decline by clicking on the respective buttons;\n    - If it's 302 Found, we extract the respective variables from the Location header's value, depending on the flow: `authorization_code`, `access_token`, `id_token`, `refresh_token` and set their values in the collection to be used by subsequent requests.\n\n### Token\n\nSee the response `access_token`, `id_token`, `refresh_token` in the **Response -> Body -> Pretty** tab.\n\nThe \"Token\" requests test the responses in the following ways:\n\n- Asserts that the response status code is 200 Ok.\n    - We extract the respective variables from the response body, depending on the flow: `access_token`, `id_token`, `refresh_token` and set their values in the collection to be used by subsequent requests.\n\n### Common tests\n\nBoth Authorize and Token requests validate the variables in the following ways:\n\n#### authorization_code\n\n- Authorization code is valid\n    - if it's not empty\n\n#### access_token\n\n- Access token has valid \"iss\" claim\n    - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n- Access token has valid \"aud\" claim\n    - if the \"aud\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n- Access token has valid \"iat\" claim\n    - if the \"iat\" claim value is before `Date.now()`\n- Access token has valid \"exp\" claim\n    - if the \"exp\" claim value is after `Date.now()`\n- Access token has valid \"nbf\" claim\n    - if the \"nbf\" claim value is before `Date.now()`\n- Access token has valid \"scope\" claim\n    - if the \"scope\" claim value is equal to {{scope}}\n- Access token is valid\n    - if all the above tests are passing\n- Access token grants access to resources\n    - automatically sends a request to the UserInfo endpoint to make sure that the `acess_token` is accepted by the server\n\n#### id_token\n\n- Id token has valid \"iss\" claim\n    - if the \"iss\" claim value is equal to [https://cfs01/cfs/oauth/mytenant](https://cfs01/cfs/oauth/mytenant)\n- Id token has valid \"aud\" claim\n    - if the \"aud\" claim value is equal to stLJwW9b3L5BPaiFFVx9cB\n- Id token has valid \"iat\" claim\n    - if the \"iat\" claim value is before `Date.now()`\n- Id token has valid \"exp\" claim\n    - if the \"exp\" claim value is after `Date.now()`\n- Id token has valid \"nbf\" claim\n    - if the \"nbf\" claim value is before `Date.now()`\n- Id token has valid \"nonce\" claim\n    - if the \"nonce\" claim value is equal to {{nonce}}\n- Id token is valid\n    - if all the above tests are passing\n\n#### refresh_token\n\n- Refresh token grants new tokens\n    - automatically send the \"Refresh token\" request to make sure that the `refresh_token` can be used to retrieve new tokens",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Authorization code flow",
			"item": [
				{
					"name": "Authorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
									"\r",
									"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('query', ({ authorization_code }) => {\r",
									"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "ef677295-ddca-4d40-b975-aafb566797ed"
							}
						}
					],
					"id": "206da90d-adb5-4c82-8f6a-e0e263c4764c",
					"protocolProfileBehavior": {
						"followRedirects": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
							"host": [
								"{{CFS Master URL}}"
							],
							"path": [
								"oauth",
								"{{Tenant Name}}",
								"authorize"
							],
							"query": [
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}"
								},
								{
									"key": "redirect_uri",
									"value": "https://oauth.pstmn.io/v1/callback"
								},
								{
									"key": "scope",
									"value": "{{scope}}"
								},
								{
									"key": "state",
									"value": "{{state}}"
								},
								{
									"key": "nonce",
									"value": "{{nonce}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "4791d662-67de-4756-9f36-2a41035be325",
							"name": "Authorize Status 200",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"authorize"
									],
									"query": [
										{
											"key": "response_type",
											"value": "code",
											"description": "Response type is \"code\" for the authorization code grant type\nhttps://datatracker.ietf.org/doc/html/rfc6749#section-4.1.1"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}"
										},
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback"
										},
										{
											"key": "scope",
											"value": "{{scope}}"
										},
										{
											"key": "state",
											"value": "{{state}}"
										},
										{
											"key": "nonce",
											"value": "{{nonce}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Cache-Control",
									"value": "private"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Server",
									"value": "Microsoft-IIS/10.0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "authorization"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-SourceFiles",
									"value": "=?UTF-8?B?WDpcc291cmNlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcYXV0aG9yaXpl?="
								},
								{
									"key": "X-Powered-By",
									"value": "ASP.NET"
								},
								{
									"key": "Date",
									"value": "Tue, 23 Apr 2024 10:37:58 GMT"
								},
								{
									"key": "Content-Length",
									"value": "1930"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en-US\">\n    <head>\n        <title>Cloud Federation Service - Authorize the application</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <meta name=\"robots\" content=\"noindex,nofollow\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <link rel=\"stylesheet\" href=\"/Content/css/base.min.css\" />\n        <link rel=\"stylesheet\" href=\"/Content/css/login.min.css\" />\n        <link rel=\"stylesheet\" href=\"/Css/Login/stormwind.css\" />\n    </head>\n    <body>\n        <div>\n            <div class=\"title\">\n                <img class=\"login-picture\" src=\"/Images/Index/stormwind.png\" alt=\"Stormwind\" />\n            </div>\n            <div data-cfs-page-name=\"oauth2-authorize-login\" class=\"guest-content\">\n                <p class=\"alert alert-warning\">\n                    <strong>You can use your account to sign in to other sites and services.</strong>\n        By signing here, you can use My Application without sharing your password.\n                </p>\n                <h3 class=\"dark\">Authorize My Application to use your account?</h3>\n                <p class=\"dark\">This application \n                    <span class=\"text-success\">will be able to</span>:\n                </p>\n                <ul class=\"dark\">\n                    <li>Get your email address.</li>\n                    <li>Get your basic profile information.</li>\n                    <li>Get your address.</li>\n                </ul>\n                <p id=\"javascriptDisabled\" class=\"alert alert-danger\">\n                    <strong>Javascript appears to be disabled in your browser.</strong>\n        This page requires Javascript to be enabled to better protect your security.\n                </p>\n                <form action=\"/oauth/stormwind/authorizelogin\" method=\"post\">\n                    <input name=\"__RequestVerificationToken\" type=\"hidden\" value=\"QQTS79uH1UnM1WKd3TG9jC7UPFINQznoTs61OCscwNHCDb1f8HpoSwhYgbgKs3LlLvXC1lZRC4Y-0IcQpcMvEMGHV19maLFEY3-GxKgj8Z01\" />\n                    <input id=\"IsApproved\" name=\"IsApproved\" type=\"hidden\" value=\"\" />\n                    <input id=\"client_id\" name=\"client_id\" type=\"hidden\" value=\"1s2o985lIf2Fa2Di5Zg0mJ\" />\n                    <input id=\"redirect_uri\" name=\"redirect_uri\" type=\"hidden\" value=\"https://oauth.pstmn.io/v1/callback\" />\n                    <input id=\"state\" name=\"state\" type=\"hidden\" value=\"6879bf2ef296d720f3a54eb8faabee9c\" />\n                    <input id=\"scope\" name=\"scope\" type=\"hidden\" value=\"openid email profile address\" />\n                    <input id=\"response_type\" name=\"response_type\" type=\"hidden\" value=\"code\" />\n                    <input id=\"response_mode\" name=\"response_mode\" type=\"hidden\" value=\"\" />\n                    <input id=\"nonce\" name=\"nonce\" type=\"hidden\" value=\"c4fdef35f2e05abe2ceb88ae0f743ee4\" />\n                    <input id=\"code_challenge\" name=\"code_challenge\" type=\"hidden\" value=\"\" />\n                    <input id=\"code_challenge_method\" name=\"code_challenge_method\" type=\"hidden\" value=\"\" />\n                    <input class=\"form-group form-control input-lg\" id=\"Username\" name=\"Username\" placeholder=\"Email Address\" type=\"text\" value=\"\" />\n                    <input class=\"form-group form-control input-lg\" id=\"Password\" name=\"Password\" placeholder=\"Password\" type=\"password\" />\n                    <div id=\"responseButtonsDiv\" class=\"clearfix\" style=\"margin-top: 15px; margin-bottom: 15px;\">\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-primary btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = true; return true;\">\n                    Sign In\n                </button>\n                        </div>\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-warning btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = false; return true;\">\n                    Cancel\n                </button>\n                        </div>\n                    </div>\n                </form>\n                <div class=\"clearfix\">\n                    <p class=\"alert alert-info alert-footer\">You can revoke access to any application at any time from your Security page.</p>\n                </div>\n            </div>\n        </div>\n        <script src=\"/Scripts/base.min.js\"></script>\n        <script language=\"javascript\" type=\"text/javascript\">\n        document.getElementById('responseButtonsDiv').style.display = 'block';\n        document.getElementById('javascriptDisabled').style.display = 'none';\n\n        if (document.location !== window.top.location) {\n            window.top.location = document.location;\n        }\n    </script>\n    </body>\n</html>"
						},
						{
							"id": "4f19d091-8bea-4b86-9277-a1f463101ff3",
							"name": "Authorize Status 302",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"authorize"
									],
									"query": [
										{
											"key": "response_type",
											"value": "code",
											"description": "Response type is \"code\" for the authorization code grant type\nhttps://datatracker.ietf.org/doc/html/rfc6749#section-4.1.1"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}"
										},
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback"
										},
										{
											"key": "scope",
											"value": "{{scope}}"
										},
										{
											"key": "state",
											"value": "{{state}}"
										},
										{
											"key": "nonce",
											"value": "{{nonce}}"
										}
									]
								}
							},
							"status": "Found",
							"code": 302,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Content-Length",
									"value": "731"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Location",
									"value": "https://oauth.pstmn.io/v1/callback?code=O6Uj%21IAAAANT0cLM80xiZEGjv89nHF4n1GjI7edcjIEaHeVDReUfNIQEAAAHffyS6XgvvgAIUU9YUh1zxazc_sda9Tn9g6lwhSbK_XOdh1RTJjYJxS3a5LFLtIB4GeGrsSxoJAQLCaU2mRwVx4znQxsY3zqzflTvH3y0zCyhBrm1naQcw96eEEtYCPppYNY-vzaxlsfL6lA4a3MT93zyh84n-HitmO-QbRcg5D1owY7JZNwBnOne8tDNO-Vbj8e5pHe8AmyUs4gF1Wake6lrNrwWsHkwlch-HKVZB25eibyywwOoypg583m-pTfdW_OQypU3eMuCQlLsa0C3zdq3oAEdJRmq9scxeqkaK836hoWJY7aevDPR6N0aBZKN_khQmuhtAOmn31xCb5Ef4FcuPn4edyJx-m8KffVwIcszsph9gL9Nce1q6gd7zhKc&session_state=DWSesQOIexOCJOGaReABDPneIXjaKKJe4XWpr8J5rTY.6824395F3D18FB89677E43CB085556CA&state=6879bf2ef296d720f3a54eb8faabee9c"
								},
								{
									"key": "Server",
									"value": "Microsoft-IIS/10.0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "authorization"
								},
								{
									"key": "X-Powered-By",
									"value": "ASP.NET"
								},
								{
									"key": "Date",
									"value": "Tue, 02 Apr 2024 12:00:35 GMT"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "<html>\n    <head>\n        <title>Object moved</title>\n    </head>\n    <body>\n        <h2>Object moved to \n            <a href=\"https://oauth.pstmn.io/v1/callback?code=O6Uj%21IAAAANT0cLM80xiZEGjv89nHF4n1GjI7edcjIEaHeVDReUfNIQEAAAHffyS6XgvvgAIUU9YUh1zxazc_sda9Tn9g6lwhSbK_XOdh1RTJjYJxS3a5LFLtIB4GeGrsSxoJAQLCaU2mRwVx4znQxsY3zqzflTvH3y0zCyhBrm1naQcw96eEEtYCPppYNY-vzaxlsfL6lA4a3MT93zyh84n-HitmO-QbRcg5D1owY7JZNwBnOne8tDNO-Vbj8e5pHe8AmyUs4gF1Wake6lrNrwWsHkwlch-HKVZB25eibyywwOoypg583m-pTfdW_OQypU3eMuCQlLsa0C3zdq3oAEdJRmq9scxeqkaK836hoWJY7aevDPR6N0aBZKN_khQmuhtAOmn31xCb5Ef4FcuPn4edyJx-m8KffVwIcszsph9gL9Nce1q6gd7zhKc&session_state=DWSesQOIexOCJOGaReABDPneIXjaKKJe4XWpr8J5rTY.6824395F3D18FB89677E43CB085556CA&state=6879bf2ef296d720f3a54eb8faabee9c\">here</a>.\n        </h2>\n    </body>\n</html>"
						}
					]
				},
				{
					"name": "Request for tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pmutils(pm).testCallbacks.testResponseStatus200();\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"pmutils(pm).testCallbacks.testAccessToken(responseData.access_token);\r",
									"pmutils(pm).testCallbacks.testIdToken(responseData.id_token);\r",
									"\r",
									"pm.collectionVariables.set(\"access_token\", responseData.access_token);\r",
									"pm.collectionVariables.set(\"id_token\", responseData.id_token);\r",
									"pm.collectionVariables.set(\"refresh_token\", responseData.refresh_token);\r",
									"\r",
									"pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(responseData.access_token);\r",
									"pmutils(pm).testCallbacks.testRefreshTokenRefreshesTokens(responseData.refresh_token);\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "5e4fb730-579c-4a3d-bf9f-a75adaecd588"
							}
						}
					],
					"id": "fe919ad0-c0cb-47fd-a101-5ee91605d8f2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								},
								{
									"key": "redirect_uri",
									"value": "https://oauth.pstmn.io/v1/callback",
									"type": "text"
								},
								{
									"key": "code",
									"value": "{{authorization_code}}",
									"type": "text"
								}
							]
						},
						"url": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token"
					},
					"response": [
						{
							"id": "5287d93c-b370-4248-ba30-ac5462187460",
							"name": "Request for tokens",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorization_code}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "state",
											"value": "{{state}}",
											"type": "text"
										}
									]
								},
								"url": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Content-Length",
									"value": "2226"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Server",
									"value": "Microsoft-IIS/10.0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "authorization"
								},
								{
									"key": "X-Powered-By",
									"value": "ASP.NET"
								},
								{
									"key": "Date",
									"value": "Tue, 02 Apr 2024 12:06:23 GMT"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImQzY2QzMjBlLTJiNjUtNDg3YS05ZGM3LTY3MTY3YWFmMzc2NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIGFkZHJlc3MgcGhvbmUgZ3JvdXBzIiwidG9rZW5fdHlwZSI6ImJlYXJlciIsImNsaWVudF9pZCI6InN0TEp3VzliM0w1QlBhaUZGVng5Y0IiLCJuYmYiOjE3MTIwNTk1ODMsImV4cCI6MTcxMjA1OTcwMywiaWF0IjoxNzEyMDU5NTc5LCJpc3MiOiJodHRwczovL2Nmcy5leGFtcGxlLmNvbS9jZnMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoiaHR0cHM6Ly9jZnMuZXhhbXBsZS5jb20vY2ZzL29hdXRoL3N0b3Jtd2luZCJ9.F00labVphp73LT-RyvIoJNAozlNtT4QsxmaTYtNyb4zNPq8ekGKwKymNqeM_fKo_yNO8Dpjva31sru0Q0wD3bJYI8AN8JWGIPbnjhXjD5lK-Uh4kU8FH-0h88D8AN2h-XAjgmtv7bCQEtaerh0Z3SO2C2EgJ-ykadzPfS3diMfhUCZLIWP5Bpr7mxGbUe_EuEhWWZfXJFatn99ps3hhTyp9s2oPIg0o9NM5nBaef-dSCajsR8a-ngiLrAHMd6UnYF0bi4SyEaBUYZwEbd2osFeJ0LzopCrwZKkuHHsiZ0qWI1cH6J9LPkmObOr2Iv5M8n1q6AP9RbyakYWDp26FZhQ\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 120,\n    \"refresh_token\": \"utYV!IAAAALfxhkVIyDdIjhj3kkKLzRmsXha3GPR6lcjtVR5_kQrJsQAAAAHHoWXoZ7hNxfEIIa25gKQs1eOT6qJxun2XK6EM9zNiZx9qoEHpF5ZeIu7fmV3C-Bf5Pesg02dwNVC3V2ilNldMX6GeBlk8tbUj_WeawZVocd8ayz3CAz57Xpg9ll-czZXkILVZaqqMyvxrVWmvab8sUM0f47HOMOcwlVGVn7kwg-WnnYPpC3VkzuYoODxavHelt_qCqL32nGEsitaQO-ZYKzBQPaPZNl9H-c8Tb3bijA\",\n    \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImQzY2QzMjBlLTJiNjUtNDg3YS05ZGM3LTY3MTY3YWFmMzc2NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJub25jZSI6ImM0ZmRlZjM1ZjJlMDVhYmUyY2ViODhhZTBmNzQzZWU0IiwibmFtZSI6IlZhcmlhbiBXcnlubiIsImZhbWlseV9uYW1lIjoiV3J5bm4iLCJnaXZlbl9uYW1lIjoiVmFyaWFuIiwiZW1haWwiOiJ2YXJpYW4ud3J5bm5Ac3Rvcm13aW5kLnplciIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJjX2hhc2giOiI2SFl6cnNHVENYZF9KM0NqajJESVFBIiwiYXRfaGFzaCI6IjRxTDMwRm9HWXFhbHUwajc5TkZPNlEiLCJuYmYiOjE3MTIwNTk1ODMsImV4cCI6MTcxMjA2MDc4MywiaWF0IjoxNzEyMDU5NTgzLCJpc3MiOiJodHRwczovL2Nmcy5leGFtcGxlLmNvbS9jZnMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoic3RMSndXOWIzTDVCUGFpRkZWeDljQiJ9.QXETXilNM6kuuUBKk8AczyDKiTPrOnSmS2s1rhF4w4G8VteqjmXR6YT3iPGp3M6kJ898tnoijR8b0_cHndrIrDGASC0YNiCPMq_yl9ZwtdUBzRtGQSTRjJSjURYWBK9bK3VBvnKowAu51jnvozeO8OL4_8dg7yeby2aYg4y5dQZRF8I5wpu1uzgOJCoOoHkngWIMJ09lu5NVHS-9BETyI6LwSz1BNnNX5ygyPkelbc7eNNyLDGqLP2-QN81QQDJWfobzEylFtDu3gzMT2z-NvpDSD5_g-NC8xVEk4bkChQe9WodwJnGosR0o2EuJFDdLuNbvkPisisCjfY5MkIntWQ\",\n    \"scope\": \"openid email profile address phone groups\"\n}"
						}
					]
				}
			],
			"id": "f1a631f4-b3fe-4e9d-95de-a0d45fd71f2a",
			"description": "- Run the \"GET Authorize\" request\n    - The response will contain an `authorization_code` that will be automatically captured and set as a collection variable to be used by the next request\n- Run the \"POST Request for tokens\" request\n    - The response will contain an `access_token`, `id_token`, `refresh_token` that will be automatically captured and set as collection variables to be used for any subsequent requests that require authentication\n\n## The Authorization Endpoint Request\n\n- Method: `GET`\n- Agent: Browser\n- Response Type: Redirect to pre-registered callback URL at client with query parameters\n    \n\n### Request Parameters\n\n| Parameter | Value | Mandatory | Description |\n| --- | --- | --- | --- |\n| response_type | `code` | yes | Defines the flow type: authorization code flow |\n| client_id | The Client ID | yes | The ID of the OAuth client. |\n| redirect_uri | The client callback URL | yes | The callback URL configured for the client. |\n| scope | Space separated string of scopes | yes | List the scopes the client is requesting access to. **OpenID Connect requests MUST contain the** **`openid`** **scope**. |\n| state | A random value | no | Will be provided back to the client in the redirect URL. Useful to keep track of the session in the client or to prevent unsolicited flows. |\n| nonce | A random value | no | A string value used to mitigate replay attacks by associating the client session with the ID token. |\n\n### Response\n\nA redirect back to the “redirect_uri”. Response parameters are provided on the query string.\n\n| Parameter | Value | Mandatory | Description |\n| --- | --- | --- | --- |\n| code | An Authorization Code | yes | An authorization code nonce, to be used in the token request. |\n\n## The Token Endpoint Request\n\n### Request Parameters\n\n- Method: `POST`\n- Content-Type: `application/x-www-form-urlencoded`\n- Agent: `HTTP client`\n- Response Type: `json`\n    \n\n| Parameter | Value | Mandatory | Description |\n| --- | --- | --- | --- |\n| grant_type | `authorization_code` | yes | Tells the token endpoint to do the second part of the code flow. |\n| client_id | The Client ID | yes | The ID of the OAuth client. |\n| client_secret | The client secret | yes | The secret of the OAuth client. |\n| redirect_uri | The callback URL of the Client | yes | The same redirect URI as was sent in the Authorization request. |\n| code | The authorization code | yes | The code given in the response of the Authorization request. |\n\n### Response\n\n- Response Type: `application/json`\n    \n\n| Parameter | Value | Mandatory | Description |\n| --- | --- | --- | --- |\n| access_token | A newly issued access token | yes | The resulting access token for the code flow. |\n| token_type | `Bearer` or other token type | yes | Describes how the token can be used. Most commonly Bearer token usage. |\n| expires_in | Expiration in seconds | yes | The time to live of the access token in seconds. |\n| scope | Space separated string | yes | The issued scopes may differ from the requested scopes. |\n| refresh_token | A newly issued refresh token | yes | The resulting refresh token for the code flow. |\n| id_token | A newly issued ID token | yes | The resulting ID token for the code flow. |",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "81f62045-cf0d-4ab1-970e-dd3ca74e80b8"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "7f554732-74a0-4ee9-9153-7b7c97f27558"
					}
				}
			]
		},
		{
			"name": "Authorization code flow with PKCE",
			"item": [
				{
					"name": "Authorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
									"\r",
									"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('query', ({ authorization_code }) => {\r",
									"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "acc48042-5aa3-4182-916a-c5ed71b592fa"
							}
						}
					],
					"id": "cc5b568f-8f72-4d03-aef6-b0ad5ab23840",
					"protocolProfileBehavior": {
						"followRedirects": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&code_challenge={{code_challenge}}&code_challenge_method={{code_method}}&state={{state}}&nonce={{nonce}}",
							"host": [
								"{{CFS Master URL}}"
							],
							"path": [
								"oauth",
								"{{Tenant Name}}",
								"authorize"
							],
							"query": [
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}"
								},
								{
									"key": "redirect_uri",
									"value": "https://oauth.pstmn.io/v1/callback"
								},
								{
									"key": "scope",
									"value": "{{scope}}"
								},
								{
									"key": "code_challenge",
									"value": "{{code_challenge}}"
								},
								{
									"key": "code_challenge_method",
									"value": "{{code_method}}"
								},
								{
									"key": "state",
									"value": "{{state}}"
								},
								{
									"key": "nonce",
									"value": "{{nonce}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "5fd578e3-638d-4ed0-b3d7-bd112592aa15",
							"name": "Authorize Status 200",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=code&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&code_challenge={{code_challenge}}&code_challenge_method={{code_method}}&state={{state}}&nonce={{nonce}}",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"authorize"
									],
									"query": [
										{
											"key": "scope",
											"value": "{{scope}}"
										},
										{
											"key": "response_type",
											"value": "code"
										},
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}"
										},
										{
											"key": "code_challenge",
											"value": "{{code_challenge}}"
										},
										{
											"key": "code_challenge_method",
											"value": "{{code_method}}"
										},
										{
											"key": "state",
											"value": "{{state}}"
										},
										{
											"key": "nonce",
											"value": "{{nonce}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Cache-Control",
									"value": "private"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Server",
									"value": "Microsoft-IIS/10.0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "authorization"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-SourceFiles",
									"value": "=?UTF-8?B?WDpcc291cmNlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcYXV0aG9yaXpl?="
								},
								{
									"key": "X-Powered-By",
									"value": "ASP.NET"
								},
								{
									"key": "Date",
									"value": "Tue, 23 Apr 2024 10:38:43 GMT"
								},
								{
									"key": "Content-Length",
									"value": "1989"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en-US\">\n    <head>\n        <title>Cloud Federation Service - Authorize the application</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <meta name=\"robots\" content=\"noindex,nofollow\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <link rel=\"stylesheet\" href=\"/Content/css/base.min.css\" />\n        <link rel=\"stylesheet\" href=\"/Content/css/login.min.css\" />\n        <link rel=\"stylesheet\" href=\"/Css/Login/stormwind.css\" />\n    </head>\n    <body>\n        <div>\n            <div class=\"title\">\n                <img class=\"login-picture\" src=\"/Images/Index/stormwind.png\" alt=\"Stormwind\" />\n            </div>\n            <div data-cfs-page-name=\"oauth2-authorize\" class=\"guest-content\">\n                <p class=\"alert alert-warning\">\n                    <strong>You can use your account to sign in to other sites and services.</strong>\n        By signing here, you can use My Application without sharing your password.\n                </p>\n                <h3 class=\"dark\">Authorize My Application to use your account?</h3>\n                <p class=\"dark\">This application \n                    <span class=\"text-success\">will be able to</span>:\n                </p>\n                <ul class=\"dark\">\n                    <li>Get your email address.</li>\n                    <li>Get your basic profile information.</li>\n                    <li>Get your address.</li>\n                </ul>\n                <p id=\"javascriptDisabled\" class=\"alert alert-danger\">\n                    <strong>Javascript appears to be disabled in your browser.</strong>\n        This page requires Javascript to be enabled to better protect your security.\n                </p>\n                <form action=\"/oauth/stormwind/authorize?scope=openid%20email%20profile%20address&amp;response_type=code&amp;redirect_uri=https://oauth.pstmn.io/v1/callback&amp;client_id=1s2o985lIf2Fa2Di5Zg0mJ&amp;code_challenge=rrsv_GL5iipUGp6yR5w5ra77fdggOxJ6htH9E217PeI&amp;code_challenge_method=S256&amp;state=6879bf2ef296d720f3a54eb8faabee9c&amp;nonce=c4fdef35f2e05abe2ceb88ae0f743ee4\" method=\"post\">\n                    <input name=\"__RequestVerificationToken\" type=\"hidden\" value=\"iwlSVXd-_4bK7lP_wdRUCYSdAgVGSe8FtevwQPzO9rdbER4kTXpceXJSHgqgP17sxjlRD_0x6msWzIkMCFM9kUabGl_U-NMQq5rGLgGMXOrBgy0GHFkdHs7jXeiR0cX9ar9QeDX8h00Hyk7wXKIFSQ2\" />\n                    <input id=\"IsApproved\" name=\"IsApproved\" type=\"hidden\" value=\"\" />\n                    <input id=\"client_id\" name=\"client_id\" type=\"hidden\" value=\"1s2o985lIf2Fa2Di5Zg0mJ\" />\n                    <input id=\"redirect_uri\" name=\"redirect_uri\" type=\"hidden\" value=\"https://oauth.pstmn.io/v1/callback\" />\n                    <input id=\"state\" name=\"state\" type=\"hidden\" value=\"6879bf2ef296d720f3a54eb8faabee9c\" />\n                    <input id=\"scope\" name=\"scope\" type=\"hidden\" value=\"openid email profile address\" />\n                    <input id=\"response_type\" name=\"response_type\" type=\"hidden\" value=\"code\" />\n                    <input id=\"nonce\" name=\"nonce\" type=\"hidden\" value=\"c4fdef35f2e05abe2ceb88ae0f743ee4\" />\n                    <div id=\"responseButtonsDiv\" class=\"clearfix\" style=\"margin-top: 15px; margin-bottom: 15px;\">\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-primary btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = true; return true;\">\n                    Accept\n                </button>\n                        </div>\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-warning btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = false; return true;\">\n                    Cancel\n                </button>\n                        </div>\n                    </div>\n                </form>\n                <div class=\"clearfix\">\n                    <p class=\"alert alert-info alert-footer\">You can revoke access to any application at any time from your Security page.</p>\n                </div>\n            </div>\n        </div>\n        <script src=\"/Scripts/base.min.js\"></script>\n        <script language=\"javascript\" type=\"text/javascript\">\n        document.getElementById('responseButtonsDiv').style.display = 'block';\n        document.getElementById('javascriptDisabled').style.display = 'none';\n\n        if (document.location !== window.top.location) {\n            window.top.location = document.location;\n        }\n    </script>\n    </body>\n</html>"
						},
						{
							"id": "610810d7-f6c5-4d3a-bff1-01d8738d64ef",
							"name": "Authorize Status 302",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=code&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&code_challenge={{code_challenge}}&code_challenge_method={{code_method}}&state={{state}}&nonce={{nonce}}",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"authorize"
									],
									"query": [
										{
											"key": "scope",
											"value": "{{scope}}"
										},
										{
											"key": "response_type",
											"value": "code"
										},
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}"
										},
										{
											"key": "code_challenge",
											"value": "{{code_challenge}}"
										},
										{
											"key": "code_challenge_method",
											"value": "{{code_method}}"
										},
										{
											"key": "state",
											"value": "{{state}}"
										},
										{
											"key": "nonce",
											"value": "{{nonce}}"
										}
									]
								}
							},
							"status": "Found",
							"code": 302,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Content-Length",
									"value": "816"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Location",
									"value": "https://oauth.pstmn.io/v1/callback?code=O6Uj%21IAAAAGZmSB_tQRJCEYgGB_jsWnBtUr3Ln19bsrVLGh3LwqbsYQEAAAFvORfULXADGP3F6K8SAdxYLheeJOWYIVDlsYmHI_VvF6WjrrYq8WubXpnIKyAesrypr8Ns6_UHEzwkFgtuTghL-87KtjTlWyVsBPUqU5SzDhyR1esvKW5LrOsdS-2K6vR7_kq6YgRoWUOvgxftxpZufDr-9iXB1EG8YVSYk0VhRGcG_GdjzNDpfZWmY7mi8GovXod967MsF7jqloVDXwDt8uG0n-xNUMOClmOKsjm467RK-EIjtDh_9Z7KoSERwi3T3SPYOoQl7eKK98of3_YuZ2iLQkLQjJXmxWe08sCFxG0R5Xb4jztlaTkBxEqArZJ7cYTZl5Jsv3fWE-mNSq7JlQIt8vlyZe--N7bJYjhskmTo-VejwwnfY7hux5PNctO02sz_UPwk9yPzB8WhwEIOgydSENdbxj9zcFwIyf11SBMxWwWLOQUEh9w2vflA-SCMRRPguEQ5AVVetDhvx666&session_state=GpQ92AYSBfdOdvo7ZEvzjdQFYcnBCUdqLObYRteNJ_s.96971A7F58E9CFF51FE81C026AF977C6&state=6879bf2ef296d720f3a54eb8faabee9c"
								},
								{
									"key": "Server",
									"value": "Microsoft-IIS/10.0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "authorization"
								},
								{
									"key": "X-Powered-By",
									"value": "ASP.NET"
								},
								{
									"key": "Date",
									"value": "Tue, 02 Apr 2024 12:06:48 GMT"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "<html>\n    <head>\n        <title>Object moved</title>\n    </head>\n    <body>\n        <h2>Object moved to \n            <a href=\"https://oauth.pstmn.io/v1/callback?code=O6Uj%21IAAAAGZmSB_tQRJCEYgGB_jsWnBtUr3Ln19bsrVLGh3LwqbsYQEAAAFvORfULXADGP3F6K8SAdxYLheeJOWYIVDlsYmHI_VvF6WjrrYq8WubXpnIKyAesrypr8Ns6_UHEzwkFgtuTghL-87KtjTlWyVsBPUqU5SzDhyR1esvKW5LrOsdS-2K6vR7_kq6YgRoWUOvgxftxpZufDr-9iXB1EG8YVSYk0VhRGcG_GdjzNDpfZWmY7mi8GovXod967MsF7jqloVDXwDt8uG0n-xNUMOClmOKsjm467RK-EIjtDh_9Z7KoSERwi3T3SPYOoQl7eKK98of3_YuZ2iLQkLQjJXmxWe08sCFxG0R5Xb4jztlaTkBxEqArZJ7cYTZl5Jsv3fWE-mNSq7JlQIt8vlyZe--N7bJYjhskmTo-VejwwnfY7hux5PNctO02sz_UPwk9yPzB8WhwEIOgydSENdbxj9zcFwIyf11SBMxWwWLOQUEh9w2vflA-SCMRRPguEQ5AVVetDhvx666&session_state=GpQ92AYSBfdOdvo7ZEvzjdQFYcnBCUdqLObYRteNJ_s.96971A7F58E9CFF51FE81C026AF977C6&state=6879bf2ef296d720f3a54eb8faabee9c\">here</a>.\n        </h2>\n    </body>\n</html>"
						}
					]
				},
				{
					"name": "Request for tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pmutils(pm).testCallbacks.testResponseStatus200();\r",
									"\r",
									"const responseData = JSON.parse(responseBody);\r",
									"\r",
									"pmutils(pm).testCallbacks.testAccessToken(responseData.access_token);\r",
									"pmutils(pm).testCallbacks.testIdToken(responseData.id_token);\r",
									"\r",
									"pm.collectionVariables.set(\"access_token\", responseData.access_token);\r",
									"pm.collectionVariables.set(\"id_token\", responseData.id_token);\r",
									"pm.collectionVariables.set(\"refresh_token\", responseData.refresh_token);\r",
									"\r",
									"pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(responseData.access_token);\r",
									"pmutils(pm).testCallbacks.testRefreshTokenRefreshesTokens(responseData.refresh_token);\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "d3ae6c16-7da5-419c-ac09-44e9543fcadf"
							}
						}
					],
					"id": "da7014f6-0257-42e3-83d4-2bfe86bebdea",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "code_verifier",
									"value": "{{code_verifier}}",
									"type": "text"
								},
								{
									"key": "redirect_uri",
									"value": "https://oauth.pstmn.io/v1/callback",
									"type": "text"
								},
								{
									"key": "code",
									"value": "{{authorization_code}}",
									"type": "text"
								}
							]
						},
						"url": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token"
					},
					"response": [
						{
							"id": "4fe366d5-d230-494f-9af0-4766e9a0551e",
							"name": "Request for tokens",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorization_code}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{code_verifier}}",
											"type": "text"
										},
										{
											"key": "state",
											"value": "{{state}}",
											"type": "text"
										}
									]
								},
								"url": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Content-Length",
									"value": "2226"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Server",
									"value": "Microsoft-IIS/10.0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "authorization"
								},
								{
									"key": "X-Powered-By",
									"value": "ASP.NET"
								},
								{
									"key": "Date",
									"value": "Tue, 02 Apr 2024 12:07:18 GMT"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImQzY2QzMjBlLTJiNjUtNDg3YS05ZGM3LTY3MTY3YWFmMzc2NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIGFkZHJlc3MgcGhvbmUgZ3JvdXBzIiwidG9rZW5fdHlwZSI6ImJlYXJlciIsImNsaWVudF9pZCI6InN0TEp3VzliM0w1QlBhaUZGVng5Y0IiLCJuYmYiOjE3MTIwNTk2MzgsImV4cCI6MTcxMjA1OTc1OCwiaWF0IjoxNzEyMDU5NjA4LCJpc3MiOiJodHRwczovL2Nmcy5leGFtcGxlLmNvbS9jZnMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoiaHR0cHM6Ly9jZnMuZXhhbXBsZS5jb20vY2ZzL29hdXRoL3N0b3Jtd2luZCJ9.oFpj8X93v6TRdHATaj2RO5euNWQsMtMehBZxKA7EZKwKIX8nz63fhAN11Q17f8BMeYOY46Nz9SALhz_RoGkITvfazE-70PwQSU1ya9fzDoj2V8ecC9toE9PE_7UqpZIxSuAAThoDQ_OmhJEhPcZptC1OmRh5L1IpaMiquySFooGQlsYVu8ImLCMySIKM4gkZ-l2eH4cOcrnFRj0al-J8SVn8sENWWV1lG--r1akAHjXBvcstJgjeeCNjaoTOVaFprUTcFfe8kc7JtcfbZEv7E4otJC71ukLUvOJYBgpgiHkXlSkTTqDamqxdENtwpTz5LP52LPbMYM13g1k9tQsZyQ\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 120,\n    \"refresh_token\": \"utYV!IAAAAM5DLrGlxSySo85F1nzKpkUL-DuGNwok7dFpSsR8xJmssQAAAAFjnmhdUw0_RRKteQFQrhnqgMu3IU5YNFOZgM-7T1tqkBFuTBQNjzughKxhwLClv09k4g8y4LqmFGGR1Q--jLVGqT6SlRbXVJFcJu_UebNufY-ESuydUZeYS_0OqjIKUaNDytA3yI1o1lBKfDgpJaJZnUeksaV4uMFinVIt74z_usBZyMGGoZYBgLuDjOPEWjX4JMejFt_TptbQQL0D2lFOpVXkdi4T2G2LDhhzqkSW0w\",\n    \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImQzY2QzMjBlLTJiNjUtNDg3YS05ZGM3LTY3MTY3YWFmMzc2NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJub25jZSI6ImM0ZmRlZjM1ZjJlMDVhYmUyY2ViODhhZTBmNzQzZWU0IiwibmFtZSI6IlZhcmlhbiBXcnlubiIsImZhbWlseV9uYW1lIjoiV3J5bm4iLCJnaXZlbl9uYW1lIjoiVmFyaWFuIiwiZW1haWwiOiJ2YXJpYW4ud3J5bm5Ac3Rvcm13aW5kLnplciIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJjX2hhc2giOiJfNzNFSGdma0RhcVRxdmRfN2Qxbkl3IiwiYXRfaGFzaCI6Im5RZDViT3VnbWRieHU3bDFnd2dkeHciLCJuYmYiOjE3MTIwNTk2MzgsImV4cCI6MTcxMjA2MDgzOCwiaWF0IjoxNzEyMDU5NjM4LCJpc3MiOiJodHRwczovL2Nmcy5leGFtcGxlLmNvbS9jZnMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoic3RMSndXOWIzTDVCUGFpRkZWeDljQiJ9.XH6Vvwn019kq4YRE6eO_7ho3pUPvOXvpe2nfwQ-fCh0MnSK79_KZzGIrBtQDqLbCE30nYV2d9Lxyzci85ZALTmmhfLdkqKkYzKqeuHcsj9l7c_L-tvzS0cqoLFpn1FcmsY8iFlK7WPufVlvna9_lmqCaThH8F6BHCHMQIINsQMZyPFBCIDhk9P6FwOU2igVHB6tM1mx_EQPYVDslrpOkbpNPK1qSWRXBeIk7dAUzZ1blim2bK2hyeLsTAvOavYcsVry0hagATGUa868S6ptZE8xUCJfHpUr2OXHpO0a1MZyvBFqiwziB3eTvpkrZNFmpGxrLXTkdMpCiN2rY44Wj3w\",\n    \"scope\": \"openid email profile address phone groups\"\n}"
						}
					]
				}
			],
			"id": "170ef4a6-e32f-430a-aad1-fc672a907aa7",
			"description": "- Run the \"GET Authorize\" request\n    - The response will contain an `authorization_code` that will be automatically captured and set as a collection variable to be used by the next request\n- Run the \"POST Request for tokens\" request\n    - The response will contain an `access_token`, `id_token`, `refresh_token` that will be automatically captured and set as collection variables to be used for any subsequent requests that require authentication\n\n## The Authorization Endpoint Request\n\n- Method: `GET`\n- Agent: Browser\n- Response Type: Redirect to pre-registered callback URL at client with query parameters\n    \n\n### Request Parameters\n\n| Parameter | Value | Mandatory | Description |\n| --- | --- | --- | --- |\n| response_type | `code` | yes | Defines the flow type: authorization code flow |\n| client_id | The Client ID | yes | The ID of the OAuth client. |\n| redirect_uri | The client callback URL | yes | The callback URL configured for the client. |\n| scope | Space separated string of scopes | yes | List the scopes the client is requesting access to. **OpenID Connect requests MUST contain the** **`openid`** **scope**. |\n| code_challenge | A high entropy random challenge | yes | A challenge generated by the client. |\n| code_challenge_method | \"plain\" (default) or \"S256\" | yes | Can be used if code_challenge is sent. Defaults to \"plain\". Needs to be sent if S256 is used as code_challenge method. |\n| state | A random value | no | Will be provided back to the client in the redirect URL. Useful to keep track of the session in the client or to prevent unsolicited flows. |\n| nonce | A random value | no | A string value used to mitigate replay attacks by associating the client session with the ID token. |\n\n### Response\n\nA redirect back to the “redirect_uri”. Response parameters are provided on the query string.\n\n| Parameter | Value | Mandatory | Description |\n| --- | --- | --- | --- |\n| code | An Authorization Code | yes | An authorization code nonce, to be used in the token request. |\n\n## The Token Endpoint Request\n\n### Request Parameters\n\n- Method: `POST`\n- Content-Type: `application/x-www-form-urlencoded`\n- Agent: `HTTP client`\n- Response Type: `json`\n    \n\n| Parameter | Value | Mandatory | Description |\n| --- | --- | --- | --- |\n| grant_type | `authorization_code` | yes | Tells the token endpoint to do the second part of the code flow. |\n| client_id | The Client ID | yes | The ID of the OAuth client. |\n| code_verifier | The verifier that matches the code_challenge | yes |  |\n| redirect_uri | The callback URL of the Client | yes | The same redirect URI as was sent in the Authorization request. |\n| code | The authorization code | yes | The code given in the response of the Authorization request. |\n\n### Response\n\n- Response Type: `application/json`\n    \n\n| Parameter | Value | Mandatory | Description |\n| --- | --- | --- | --- |\n| access_token | A newly issued access token | yes | The resulting access token for the code flow. |\n| token_type | `Bearer` or other token type | yes | Describes how the token can be used. Most commonly Bearer token usage. |\n| expires_in | Expiration in seconds | yes | The time to live of the access token in seconds. |\n| scope | Space separated string | yes | The issued scopes may differ from the requested scopes. |\n| refresh_token | A newly issued refresh token | yes | The resulting refresh token for the code flow. |\n| id_token | A newly issued ID token | yes | The resulting ID token for the code flow. |",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "a205d047-20c9-4b94-a3ec-51766fd80f06"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "57d8379c-52de-4b67-b3bc-fa04eb645ee2"
					}
				}
			]
		},
		{
			"name": "Implicit flow",
			"item": [
				{
					"name": "Authorize - id_token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
									"\r",
									"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('hash', ({ id_token }) => {\r",
									"    pmutils(pm).testCallbacks.testIdToken(id_token);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "7211a89c-2909-4bad-946e-a8531e5e14e9"
							}
						}
					],
					"id": "d42c4b75-533c-418f-b98d-6918a9bbeb60",
					"protocolProfileBehavior": {
						"followRedirects": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=id_token&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
							"host": [
								"{{CFS Master URL}}"
							],
							"path": [
								"oauth",
								"{{Tenant Name}}",
								"authorize"
							],
							"query": [
								{
									"key": "response_type",
									"value": "id_token"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}"
								},
								{
									"key": "redirect_uri",
									"value": "https://oauth.pstmn.io/v1/callback"
								},
								{
									"key": "scope",
									"value": "{{scope}}"
								},
								{
									"key": "state",
									"value": "{{state}}"
								},
								{
									"key": "nonce",
									"value": "{{nonce}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "29e780cc-f928-4fec-a32e-6eb4581f0a23",
							"name": "Authorize - id_token",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=id_token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&state={{state}}&nonce={{nonce}}",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"authorize"
									],
									"query": [
										{
											"key": "scope",
											"value": "{{scope}}"
										},
										{
											"key": "response_type",
											"value": "id_token"
										},
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}"
										},
										{
											"key": "state",
											"value": "{{state}}"
										},
										{
											"key": "nonce",
											"value": "{{nonce}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Cache-Control",
									"value": "private"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Server",
									"value": "Microsoft-IIS/10.0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "authorization"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Powered-By",
									"value": "ASP.NET"
								},
								{
									"key": "Date",
									"value": "Tue, 02 Apr 2024 12:08:08 GMT"
								},
								{
									"key": "Content-Length",
									"value": "4477"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en-US\">\n    <head>\n        <title>Cloud Federation Service - Authorize the application</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <meta name=\"robots\" content=\"noindex,nofollow\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <link rel=\"stylesheet\" href=\"/cfs/Content/css/base.min.css\" />\n        <link rel=\"stylesheet\" href=\"/cfs/Content/css/login.min.css\" />\n        <link rel=\"stylesheet\" href=\"/cfs/Css/Login/stormwind.css\" />\n    </head>\n    <body>\n        <div>\n            <div class=\"title\">\n                <img class=\"login-picture\" src=\"/cfs/Images/Index/stormwind.png\" alt=\"Stormwind\" />\n            </div>\n            <div data-cfs-page-name=\"oauth2-authorize\" class=\"guest-content\">\n                <p class=\"alert alert-warning\">\n                    <strong>You can use your account to sign in to other sites and services.</strong>\r\n        By signing here, you can use Test OIDC Application without sharing your password.\n                </p>\n                <h3 class=\"dark\">Authorize Test OIDC Application to use your account?</h3>\n                <p class=\"dark\">This application \n                    <span class=\"text-success\">will be able to</span>:\n                </p>\n                <ul class=\"dark\">\n                    <li>Get your email address.</li>\n                    <li>Get your basic profile information.</li>\n                    <li>Get your address.</li>\n                    <li>Get your phone number.</li>\n                    <li>Get your groups.</li>\n                </ul>\n                <p id=\"javascriptDisabled\" class=\"alert alert-danger\">\n                    <strong>Javascript appears to be disabled in your browser.</strong>\r\n        This page requires Javascript to be enabled to better protect your security.\n                </p>\n                <form action=\"/cfs/oauth/stormwind/authorize?scope=openid%20email%20profile%20address%20phone%20groups&amp;response_type=id_token&amp;redirect_uri=https://oauth.pstmn.io/v1/callback&amp;client_id=stLJwW9b3L5BPaiFFVx9cB&amp;state=6879bf2ef296d720f3a54eb8faabee9c&amp;nonce=c4fdef35f2e05abe2ceb88ae0f743ee4\" method=\"post\">\n                    <input name=\"__RequestVerificationToken\" type=\"hidden\" value=\"XxkR4WpYAT_Ry6GDdKXbAxw0kuR3K4c6c-PRKX2cehgnpFYpCkl6ylsHV7rEqPJWjHQVJvqJvT_j4I-q0kAGyUHf-Qq1gF36yS81JkDEzfAGlgBUAG0a3tANNTmlGqI3XTZ8FjIS-l-XGrUJD0YQNA2\" />\n                    <input id=\"IsApproved\" name=\"IsApproved\" type=\"hidden\" value=\"\" />\n                    <input id=\"client_id\" name=\"client_id\" type=\"hidden\" value=\"stLJwW9b3L5BPaiFFVx9cB\" />\n                    <input id=\"redirect_uri\" name=\"redirect_uri\" type=\"hidden\" value=\"https://oauth.pstmn.io/v1/callback\" />\n                    <input id=\"state\" name=\"state\" type=\"hidden\" value=\"6879bf2ef296d720f3a54eb8faabee9c\" />\n                    <input id=\"scope\" name=\"scope\" type=\"hidden\" value=\"openid email profile address phone groups\" />\n                    <input id=\"response_type\" name=\"response_type\" type=\"hidden\" value=\"id_token\" />\n                    <input id=\"nonce\" name=\"nonce\" type=\"hidden\" value=\"c4fdef35f2e05abe2ceb88ae0f743ee4\" />\n                    <div id=\"responseButtonsDiv\" class=\"clearfix\" style=\"margin-top: 15px; margin-bottom: 15px;\">\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-primary btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = true; return true;\">\r\n                    Accept\r\n                </button>\n                        </div>\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-warning btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = false; return true;\">\r\n                    Cancel\r\n                </button>\n                        </div>\n                    </div>\n                </form>\n                <div class=\"clearfix\">\n                    <p class=\"alert alert-info alert-footer\">You can revoke access to any application at any time from your Security page.</p>\n                </div>\n            </div>\n        </div>\n        <script src=\"/cfs/Scripts/base.min.js\"></script>\n        <script language=\"javascript\" type=\"text/javascript\">\r\n        document.getElementById('responseButtonsDiv').style.display = 'block';\r\n        document.getElementById('javascriptDisabled').style.display = 'none';\r\n\r\n        if (document.location !== window.top.location) {\r\n            window.top.location = document.location;\r\n        }\r\n    </script>\n    </body>\n</html>"
						}
					]
				},
				{
					"name": "Authorize - id_token token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
									"\r",
									"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('hash', ({ access_token, id_token }) => {\r",
									"    pmutils(pm).testCallbacks.testAccessToken(access_token);\r",
									"    pmutils(pm).testCallbacks.testIdToken(id_token);\r",
									"\r",
									"    pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(access_token);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "36f705d5-2a70-416d-9e53-a2abfc1c3bcb"
							}
						}
					],
					"id": "85b26714-6185-44f8-9d19-790071529762",
					"protocolProfileBehavior": {
						"followRedirects": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=id_token token&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
							"host": [
								"{{CFS Master URL}}"
							],
							"path": [
								"oauth",
								"{{Tenant Name}}",
								"authorize"
							],
							"query": [
								{
									"key": "response_type",
									"value": "id_token token"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}"
								},
								{
									"key": "redirect_uri",
									"value": "https://oauth.pstmn.io/v1/callback"
								},
								{
									"key": "scope",
									"value": "{{scope}}"
								},
								{
									"key": "state",
									"value": "{{state}}"
								},
								{
									"key": "nonce",
									"value": "{{nonce}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "c9c43661-57b4-49ed-8e53-88a98befc721",
							"name": "Authorize - id_token token",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=id_token token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&state={{state}}&nonce={{nonce}}",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"authorize"
									],
									"query": [
										{
											"key": "scope",
											"value": "{{scope}}"
										},
										{
											"key": "response_type",
											"value": "id_token token"
										},
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}"
										},
										{
											"key": "state",
											"value": "{{state}}"
										},
										{
											"key": "nonce",
											"value": "{{nonce}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Cache-Control",
									"value": "private"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Server",
									"value": "Microsoft-IIS/10.0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "authorization"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Powered-By",
									"value": "ASP.NET"
								},
								{
									"key": "Date",
									"value": "Tue, 02 Apr 2024 12:08:18 GMT"
								},
								{
									"key": "Content-Length",
									"value": "4491"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en-US\">\n    <head>\n        <title>Cloud Federation Service - Authorize the application</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <meta name=\"robots\" content=\"noindex,nofollow\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <link rel=\"stylesheet\" href=\"/cfs/Content/css/base.min.css\" />\n        <link rel=\"stylesheet\" href=\"/cfs/Content/css/login.min.css\" />\n        <link rel=\"stylesheet\" href=\"/cfs/Css/Login/stormwind.css\" />\n    </head>\n    <body>\n        <div>\n            <div class=\"title\">\n                <img class=\"login-picture\" src=\"/cfs/Images/Index/stormwind.png\" alt=\"Stormwind\" />\n            </div>\n            <div data-cfs-page-name=\"oauth2-authorize\" class=\"guest-content\">\n                <p class=\"alert alert-warning\">\n                    <strong>You can use your account to sign in to other sites and services.</strong>\r\n        By signing here, you can use Test OIDC Application without sharing your password.\n                </p>\n                <h3 class=\"dark\">Authorize Test OIDC Application to use your account?</h3>\n                <p class=\"dark\">This application \n                    <span class=\"text-success\">will be able to</span>:\n                </p>\n                <ul class=\"dark\">\n                    <li>Get your email address.</li>\n                    <li>Get your basic profile information.</li>\n                    <li>Get your address.</li>\n                    <li>Get your phone number.</li>\n                    <li>Get your groups.</li>\n                </ul>\n                <p id=\"javascriptDisabled\" class=\"alert alert-danger\">\n                    <strong>Javascript appears to be disabled in your browser.</strong>\r\n        This page requires Javascript to be enabled to better protect your security.\n                </p>\n                <form action=\"/cfs/oauth/stormwind/authorize?scope=openid%20email%20profile%20address%20phone%20groups&amp;response_type=id_token%20token&amp;redirect_uri=https://oauth.pstmn.io/v1/callback&amp;client_id=stLJwW9b3L5BPaiFFVx9cB&amp;state=6879bf2ef296d720f3a54eb8faabee9c&amp;nonce=c4fdef35f2e05abe2ceb88ae0f743ee4\" method=\"post\">\n                    <input name=\"__RequestVerificationToken\" type=\"hidden\" value=\"OQs4jpeUU3HYJccPXnx-SyVyrdFuSeNl08iM0Wz76edRPQ0vwz_J_RGqHrSPaHbVMK5WsjdGZgCwS5jXcuvull367ExIvx33fpmrc40T4eVEEtfuHVOBy5rLJ4HxFesB8-fQdO_c2AAbh-UFrM5L7A2\" />\n                    <input id=\"IsApproved\" name=\"IsApproved\" type=\"hidden\" value=\"\" />\n                    <input id=\"client_id\" name=\"client_id\" type=\"hidden\" value=\"stLJwW9b3L5BPaiFFVx9cB\" />\n                    <input id=\"redirect_uri\" name=\"redirect_uri\" type=\"hidden\" value=\"https://oauth.pstmn.io/v1/callback\" />\n                    <input id=\"state\" name=\"state\" type=\"hidden\" value=\"6879bf2ef296d720f3a54eb8faabee9c\" />\n                    <input id=\"scope\" name=\"scope\" type=\"hidden\" value=\"openid email profile address phone groups\" />\n                    <input id=\"response_type\" name=\"response_type\" type=\"hidden\" value=\"id_token token\" />\n                    <input id=\"nonce\" name=\"nonce\" type=\"hidden\" value=\"c4fdef35f2e05abe2ceb88ae0f743ee4\" />\n                    <div id=\"responseButtonsDiv\" class=\"clearfix\" style=\"margin-top: 15px; margin-bottom: 15px;\">\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-primary btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = true; return true;\">\r\n                    Accept\r\n                </button>\n                        </div>\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-warning btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = false; return true;\">\r\n                    Cancel\r\n                </button>\n                        </div>\n                    </div>\n                </form>\n                <div class=\"clearfix\">\n                    <p class=\"alert alert-info alert-footer\">You can revoke access to any application at any time from your Security page.</p>\n                </div>\n            </div>\n        </div>\n        <script src=\"/cfs/Scripts/base.min.js\"></script>\n        <script language=\"javascript\" type=\"text/javascript\">\r\n        document.getElementById('responseButtonsDiv').style.display = 'block';\r\n        document.getElementById('javascriptDisabled').style.display = 'none';\r\n\r\n        if (document.location !== window.top.location) {\r\n            window.top.location = document.location;\r\n        }\r\n    </script>\n    </body>\n</html>"
						}
					]
				}
			],
			"id": "2fcbfb50-fb56-4a66-a95f-b8bb913867f7",
			"description": "- Run any of the \"GET Authorize\" requests\n    - The response will contain an `access_token`, an `id_token`, or both that will be automatically captured and set as collection variables\n\n**N.B.:** The \"Automatically follow redirects\" setting must be **disabled** in Postman in order to run the requests in this folder!\n\n<img src=\"https://content.pstmn.io/e3542bce-db42-4b74-b2b5-6a4a0cabd789/aW1hZ2UucG5n\" width=\"846\" height=\"840\">\n\n## The Authorize Endpoint\n\n- Method: `GET`\n- Agent: Browser\n- Response Type: Redirect to pre-registered callback at client with parameters in the fragment\n    \n\n### Request Parameters\n\n| Parameter | Value | Mandatory | Description |\n| --- | --- | --- | --- |\n| response_type | `id_token` or `id_token token` | yes | Defines the flow type: implicit flow |\n| client_id | The Client ID | yes | The ID of the OAuth client. |\n| redirect_uri | The client callback URL | yes | The callback URL configured for the client. |\n| scope | Space separated string of scopes | yes | List the scopes the client is requesting access to. |\n| state | a random value | no | Will be provided back to the client in the redirect URL. Useful to keep track of the session in the client or to prevent unsolicited flows. |\n| nonce | A random value | no | A string value used to mitigate replay attacks by associating the client session with the ID token. |\n\n### Response\n\nA redirect back to the “redirect_uri”. Response parameters are provided on the fragment part of the URL.\n\n| Parameter | Value | Mandatory | Description |\n| --- | --- | --- | --- |\n| access_token | A newly issued access token | yes\\* | The resulting access token for the code flow. \\*Mandatory if the request response_type is `id_token token`. |\n| token_type | `Bearer` or other token type | yes | Describes how the token can be used. Most commonly Bearer token usage. |\n| expires_in | Expiration in seconds | yes | The time to live of the access token in seconds. |\n| scope | Space separated string | yes | The issued scopes may differ from the requested scopes. |\n| id_token | A newly issued ID token | yes | The resulting ID token for the flow. |\n| state | The same value as given in the request | yes\\* | The same value as the client sent in the request. Use to match request to the redirect response. \\*Mandatory if the state was sent in the request. |"
		},
		{
			"name": "Hybrid flow",
			"item": [
				{
					"name": "Token - code id_token",
					"item": [
						{
							"name": "Authorize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
											"\r",
											"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('form', ({ authorization_code, id_token }) => {\r",
											"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
											"    pmutils(pm).testCallbacks.testIdToken(id_token);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "126d6894-ce53-42f1-bf36-909a0e041027"
									}
								}
							],
							"id": "adbf7a8b-a78d-4b22-8082-aaca0cbb7fb0",
							"protocolProfileBehavior": {
								"followRedirects": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code id_token&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"authorize"
									],
									"query": [
										{
											"key": "response_type",
											"value": "code id_token"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}"
										},
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback"
										},
										{
											"key": "scope",
											"value": "{{scope}}"
										},
										{
											"key": "state",
											"value": "{{state}}"
										},
										{
											"key": "nonce",
											"value": "{{nonce}}"
										}
									]
								}
							},
							"response": [
								{
									"id": "73b3da06-49e0-4a39-a0c9-3aaa227dd8df",
									"name": "Authorize",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=code id_token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&state={{state}}&nonce={{nonce}}",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"authorize"
											],
											"query": [
												{
													"key": "scope",
													"value": "{{scope}}"
												},
												{
													"key": "response_type",
													"value": "code id_token"
												},
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}"
												},
												{
													"key": "state",
													"value": "{{state}}"
												},
												{
													"key": "nonce",
													"value": "{{nonce}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Cache-Control",
											"value": "private"
										},
										{
											"key": "Content-Type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "Server",
											"value": "Microsoft-IIS/10.0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Headers",
											"value": "authorization"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Powered-By",
											"value": "ASP.NET"
										},
										{
											"key": "Date",
											"value": "Tue, 02 Apr 2024 12:08:58 GMT"
										},
										{
											"key": "Content-Length",
											"value": "4489"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en-US\">\n    <head>\n        <title>Cloud Federation Service - Authorize the application</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <meta name=\"robots\" content=\"noindex,nofollow\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <link rel=\"stylesheet\" href=\"/cfs/Content/css/base.min.css\" />\n        <link rel=\"stylesheet\" href=\"/cfs/Content/css/login.min.css\" />\n        <link rel=\"stylesheet\" href=\"/cfs/Css/Login/stormwind.css\" />\n    </head>\n    <body>\n        <div>\n            <div class=\"title\">\n                <img class=\"login-picture\" src=\"/cfs/Images/Index/stormwind.png\" alt=\"Stormwind\" />\n            </div>\n            <div data-cfs-page-name=\"oauth2-authorize\" class=\"guest-content\">\n                <p class=\"alert alert-warning\">\n                    <strong>You can use your account to sign in to other sites and services.</strong>\r\n        By signing here, you can use Test OIDC Application without sharing your password.\n                </p>\n                <h3 class=\"dark\">Authorize Test OIDC Application to use your account?</h3>\n                <p class=\"dark\">This application \n                    <span class=\"text-success\">will be able to</span>:\n                </p>\n                <ul class=\"dark\">\n                    <li>Get your email address.</li>\n                    <li>Get your basic profile information.</li>\n                    <li>Get your address.</li>\n                    <li>Get your phone number.</li>\n                    <li>Get your groups.</li>\n                </ul>\n                <p id=\"javascriptDisabled\" class=\"alert alert-danger\">\n                    <strong>Javascript appears to be disabled in your browser.</strong>\r\n        This page requires Javascript to be enabled to better protect your security.\n                </p>\n                <form action=\"/cfs/oauth/stormwind/authorize?scope=openid%20email%20profile%20address%20phone%20groups&amp;response_type=code%20id_token&amp;redirect_uri=https://oauth.pstmn.io/v1/callback&amp;client_id=stLJwW9b3L5BPaiFFVx9cB&amp;state=6879bf2ef296d720f3a54eb8faabee9c&amp;nonce=c4fdef35f2e05abe2ceb88ae0f743ee4\" method=\"post\">\n                    <input name=\"__RequestVerificationToken\" type=\"hidden\" value=\"N-G2nkrv0sB6wc-bJiLJ7956TMCoSzkO85wkLYUERK9a_HiVv3yAmGOgTs3ezjBOzWBleBMcVCxRLLz8B_gJ6Y4jwLuAxFX4x0sKPZkIXAkkBrvJDs6EHjRwU2sbt87xG9_dEbITLQF4TDOeyAaE_g2\" />\n                    <input id=\"IsApproved\" name=\"IsApproved\" type=\"hidden\" value=\"\" />\n                    <input id=\"client_id\" name=\"client_id\" type=\"hidden\" value=\"stLJwW9b3L5BPaiFFVx9cB\" />\n                    <input id=\"redirect_uri\" name=\"redirect_uri\" type=\"hidden\" value=\"https://oauth.pstmn.io/v1/callback\" />\n                    <input id=\"state\" name=\"state\" type=\"hidden\" value=\"6879bf2ef296d720f3a54eb8faabee9c\" />\n                    <input id=\"scope\" name=\"scope\" type=\"hidden\" value=\"openid email profile address phone groups\" />\n                    <input id=\"response_type\" name=\"response_type\" type=\"hidden\" value=\"code id_token\" />\n                    <input id=\"nonce\" name=\"nonce\" type=\"hidden\" value=\"c4fdef35f2e05abe2ceb88ae0f743ee4\" />\n                    <div id=\"responseButtonsDiv\" class=\"clearfix\" style=\"margin-top: 15px; margin-bottom: 15px;\">\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-primary btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = true; return true;\">\r\n                    Accept\r\n                </button>\n                        </div>\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-warning btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = false; return true;\">\r\n                    Cancel\r\n                </button>\n                        </div>\n                    </div>\n                </form>\n                <div class=\"clearfix\">\n                    <p class=\"alert alert-info alert-footer\">You can revoke access to any application at any time from your Security page.</p>\n                </div>\n            </div>\n        </div>\n        <script src=\"/cfs/Scripts/base.min.js\"></script>\n        <script language=\"javascript\" type=\"text/javascript\">\r\n        document.getElementById('responseButtonsDiv').style.display = 'block';\r\n        document.getElementById('javascriptDisabled').style.display = 'none';\r\n\r\n        if (document.location !== window.top.location) {\r\n            window.top.location = document.location;\r\n        }\r\n    </script>\n    </body>\n</html>"
								}
							]
						},
						{
							"name": "Request for tokens",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pmutils(pm).testCallbacks.testResponseStatus200();\r",
											"\r",
											"const responseData = JSON.parse(responseBody);\r",
											"\r",
											"pmutils(pm).testCallbacks.testAccessToken(responseData.access_token);\r",
											"pmutils(pm).testCallbacks.testIdToken(responseData.id_token);\r",
											"\r",
											"pm.collectionVariables.set(\"access_token\", responseData.access_token);\r",
											"pm.collectionVariables.set(\"id_token\", responseData.id_token);\r",
											"pm.collectionVariables.set(\"refresh_token\", responseData.refresh_token);\r",
											"\r",
											"pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(responseData.access_token);\r",
											"pmutils(pm).testCallbacks.testRefreshTokenRefreshesTokens(responseData.refresh_token);\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "d4fed480-8779-4721-b57c-77a3c4948df4"
									}
								}
							],
							"id": "e3538ccb-e8eb-4f60-bdff-5b96edb211f1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorization_code}}",
											"type": "text"
										}
									]
								},
								"url": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token"
							},
							"response": [
								{
									"id": "2850173c-f0f2-4efe-b01e-c8f12e260102",
									"name": "Request for tokens",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}",
													"type": "text"
												},
												{
													"key": "assertion",
													"value": "{{id_token}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{client_secret}}",
													"type": "text"
												},
												{
													"key": "state",
													"value": "{{state}}",
													"type": "text"
												}
											]
										},
										"url": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Content-Length",
											"value": "2226"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Server",
											"value": "Microsoft-IIS/10.0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Headers",
											"value": "authorization"
										},
										{
											"key": "X-Powered-By",
											"value": "ASP.NET"
										},
										{
											"key": "Date",
											"value": "Tue, 02 Apr 2024 12:09:06 GMT"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImQzY2QzMjBlLTJiNjUtNDg3YS05ZGM3LTY3MTY3YWFmMzc2NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIGFkZHJlc3MgcGhvbmUgZ3JvdXBzIiwidG9rZW5fdHlwZSI6ImJlYXJlciIsImNsaWVudF9pZCI6InN0TEp3VzliM0w1QlBhaUZGVng5Y0IiLCJuYmYiOjE3MTIwNTk3NDYsImV4cCI6MTcxMjA1OTg2NiwiaWF0IjoxNzEyMDU5NzM4LCJpc3MiOiJodHRwczovL2Nmcy5leGFtcGxlLmNvbS9jZnMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoiaHR0cHM6Ly9jZnMuZXhhbXBsZS5jb20vY2ZzL29hdXRoL3N0b3Jtd2luZCJ9.lySCTDHduG5VIh0kne-b6HQLkQ7ups1vE_wiq3OmGaTPF8S-3JWCg62qETH5HpBNm0K7DebVLyuWhwOLBQon9ReifU0Jt0RFpLijOi89AehpKwJyYpN2_27kh4ztQM_j4S0-9QThHHjTkrvdX8Qc-nLG_ufBt4Z7ngRMCxPkCBdreZxkKiRGg5TczoIbn4F9YXTiJIG4FPhkXXy4h5e6IGIHYkXlxVee4ImLPbIpFP4T-Xkw-Jri9gdXJnTRKWEZn9ARodSYZI7yQm8i5KwprGU5H8V8THP5mwE-4X14mf5uGCn8NPHfQ1qkK3PxbSAAd6j-1iqQPNJ9nwmokvSYIg\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 120,\n    \"refresh_token\": \"utYV!IAAAAFL9aaCI3sDlPkRnMbxgWM9NqL7MqOneugTkp8rkcpY9sQAAAAH8TbS5GB3K6dfLrb217XD-Rv6DjGU_ozVIvB2NvcqpfnkLPm4S2YxOdkT-XD-0vZM9VAGfuXHHxaqJUJVOddnFvW01o9IqWpyd8wWr-zQE6l_ndlZln7RSrbhLtQQzMAtk4SKhl-szZybMY7T9H9xu40qNn6yUuW8qhHGDgvminzr6V2Qrv8EdamU0h2oBBPqYeo34xqg18n1FG9EuelRUOmALqCH8nfsBzWQUYWFy3A\",\n    \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImQzY2QzMjBlLTJiNjUtNDg3YS05ZGM3LTY3MTY3YWFmMzc2NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJub25jZSI6ImM0ZmRlZjM1ZjJlMDVhYmUyY2ViODhhZTBmNzQzZWU0IiwibmFtZSI6IlZhcmlhbiBXcnlubiIsImZhbWlseV9uYW1lIjoiV3J5bm4iLCJnaXZlbl9uYW1lIjoiVmFyaWFuIiwiZW1haWwiOiJ2YXJpYW4ud3J5bm5Ac3Rvcm13aW5kLnplciIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJjX2hhc2giOiJWVjlCb0I3cmNHOUw2SlFkenBsRVRnIiwiYXRfaGFzaCI6Im1zdEozMDlMLW5YQzJKbnVMYzBCR2ciLCJuYmYiOjE3MTIwNTk3NDYsImV4cCI6MTcxMjA2MDk0NiwiaWF0IjoxNzEyMDU5NzQ2LCJpc3MiOiJodHRwczovL2Nmcy5leGFtcGxlLmNvbS9jZnMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoic3RMSndXOWIzTDVCUGFpRkZWeDljQiJ9.Qb4M037KUMWBsp_UdBMMRuCF2E7tk4WGPS8yiJ5BDNvPI12EVOln9gfUiBtrQhB-dVX9COXhpofIM-9rD8Mf25hxLjgP-ccFzoWEEhtCt6M__e75eddYEZFNKb_JJDZvfh9w0d4vLdNb-rqg9xE0TdlzjyhtmIqGrPWUHOu_nKCjav9G48mp8oiFuYdogmV1Zjl5Ur_iQ2HTWh3lDACve31bGVQyu81hHlclAfz1YwwwXkgjxZp6gRPOEs3jiq1zjogm5KlEh_fviU9qxo9LZ-_SEEcWMJ0aHk5Udkfv36ySc3l_fZWLG2E9IOvVph6HK_BrI-PDNmu_fkLHh6qOeA\",\n    \"scope\": \"openid email profile address phone groups\"\n}"
								}
							]
						}
					],
					"id": "a8ebec9f-7630-4ae8-989e-da6e1c1c26e5",
					"description": "- Run the \"GET Authorize\" request\n- Run the \"POST Request for tokens\" request"
				},
				{
					"name": "Token - code token id_token",
					"item": [
						{
							"name": "Authorize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
											"\r",
											"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('form', ({ authorization_code, access_token, id_token }) => {\r",
											"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
											"    pmutils(pm).testCallbacks.testAccessToken(access_token);\r",
											"    pmutils(pm).testCallbacks.testIdToken(id_token);\r",
											"    pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(access_token);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "7ecf530a-25dc-4d72-93c0-a8c04ba3a9cc"
									}
								}
							],
							"id": "265d4ec3-1fc1-4f85-9ef2-ab16802dc364",
							"protocolProfileBehavior": {
								"followRedirects": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code id_token token&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"authorize"
									],
									"query": [
										{
											"key": "response_type",
											"value": "code id_token token"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}"
										},
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback"
										},
										{
											"key": "scope",
											"value": "{{scope}}"
										},
										{
											"key": "state",
											"value": "{{state}}"
										},
										{
											"key": "nonce",
											"value": "{{nonce}}"
										}
									]
								}
							},
							"response": [
								{
									"id": "a43f2a6a-2523-4de3-b195-4763dc22d2e4",
									"name": "Authorize",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=code id_token token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&state={{state}}&nonce={{nonce}}",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"authorize"
											],
											"query": [
												{
													"key": "scope",
													"value": "{{scope}}"
												},
												{
													"key": "response_type",
													"value": "code id_token token"
												},
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}"
												},
												{
													"key": "state",
													"value": "{{state}}"
												},
												{
													"key": "nonce",
													"value": "{{nonce}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Cache-Control",
											"value": "private"
										},
										{
											"key": "Content-Type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "Server",
											"value": "Microsoft-IIS/10.0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Headers",
											"value": "authorization"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Powered-By",
											"value": "ASP.NET"
										},
										{
											"key": "Date",
											"value": "Tue, 02 Apr 2024 12:09:31 GMT"
										},
										{
											"key": "Content-Length",
											"value": "4503"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en-US\">\n    <head>\n        <title>Cloud Federation Service - Authorize the application</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <meta name=\"robots\" content=\"noindex,nofollow\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <link rel=\"stylesheet\" href=\"/cfs/Content/css/base.min.css\" />\n        <link rel=\"stylesheet\" href=\"/cfs/Content/css/login.min.css\" />\n        <link rel=\"stylesheet\" href=\"/cfs/Css/Login/stormwind.css\" />\n    </head>\n    <body>\n        <div>\n            <div class=\"title\">\n                <img class=\"login-picture\" src=\"/cfs/Images/Index/stormwind.png\" alt=\"Stormwind\" />\n            </div>\n            <div data-cfs-page-name=\"oauth2-authorize\" class=\"guest-content\">\n                <p class=\"alert alert-warning\">\n                    <strong>You can use your account to sign in to other sites and services.</strong>\r\n        By signing here, you can use Test OIDC Application without sharing your password.\n                </p>\n                <h3 class=\"dark\">Authorize Test OIDC Application to use your account?</h3>\n                <p class=\"dark\">This application \n                    <span class=\"text-success\">will be able to</span>:\n                </p>\n                <ul class=\"dark\">\n                    <li>Get your email address.</li>\n                    <li>Get your basic profile information.</li>\n                    <li>Get your address.</li>\n                    <li>Get your phone number.</li>\n                    <li>Get your groups.</li>\n                </ul>\n                <p id=\"javascriptDisabled\" class=\"alert alert-danger\">\n                    <strong>Javascript appears to be disabled in your browser.</strong>\r\n        This page requires Javascript to be enabled to better protect your security.\n                </p>\n                <form action=\"/cfs/oauth/stormwind/authorize?scope=openid%20email%20profile%20address%20phone%20groups&amp;response_type=code%20id_token%20token&amp;redirect_uri=https://oauth.pstmn.io/v1/callback&amp;client_id=stLJwW9b3L5BPaiFFVx9cB&amp;state=6879bf2ef296d720f3a54eb8faabee9c&amp;nonce=c4fdef35f2e05abe2ceb88ae0f743ee4\" method=\"post\">\n                    <input name=\"__RequestVerificationToken\" type=\"hidden\" value=\"cucIfmmQETtVeRWOtgNHP1GNMu0zSTZ_bpJUK6VKIZmcczAkwcf3hnT8bKr9ABrRo76AaKyvWlzfYlv4CW3OTmiqEUa_Ib8MuZ8LKcKYULfy-oi5-Lpdsz0JlZ4KBtL8GakdCGWNsmKjSk-l95KJSQ2\" />\n                    <input id=\"IsApproved\" name=\"IsApproved\" type=\"hidden\" value=\"\" />\n                    <input id=\"client_id\" name=\"client_id\" type=\"hidden\" value=\"stLJwW9b3L5BPaiFFVx9cB\" />\n                    <input id=\"redirect_uri\" name=\"redirect_uri\" type=\"hidden\" value=\"https://oauth.pstmn.io/v1/callback\" />\n                    <input id=\"state\" name=\"state\" type=\"hidden\" value=\"6879bf2ef296d720f3a54eb8faabee9c\" />\n                    <input id=\"scope\" name=\"scope\" type=\"hidden\" value=\"openid email profile address phone groups\" />\n                    <input id=\"response_type\" name=\"response_type\" type=\"hidden\" value=\"code id_token token\" />\n                    <input id=\"nonce\" name=\"nonce\" type=\"hidden\" value=\"c4fdef35f2e05abe2ceb88ae0f743ee4\" />\n                    <div id=\"responseButtonsDiv\" class=\"clearfix\" style=\"margin-top: 15px; margin-bottom: 15px;\">\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-primary btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = true; return true;\">\r\n                    Accept\r\n                </button>\n                        </div>\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-warning btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = false; return true;\">\r\n                    Cancel\r\n                </button>\n                        </div>\n                    </div>\n                </form>\n                <div class=\"clearfix\">\n                    <p class=\"alert alert-info alert-footer\">You can revoke access to any application at any time from your Security page.</p>\n                </div>\n            </div>\n        </div>\n        <script src=\"/cfs/Scripts/base.min.js\"></script>\n        <script language=\"javascript\" type=\"text/javascript\">\r\n        document.getElementById('responseButtonsDiv').style.display = 'block';\r\n        document.getElementById('javascriptDisabled').style.display = 'none';\r\n\r\n        if (document.location !== window.top.location) {\r\n            window.top.location = document.location;\r\n        }\r\n    </script>\n    </body>\n</html>"
								}
							]
						},
						{
							"name": "Request for tokens",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pmutils(pm).testCallbacks.testResponseStatus200();\r",
											"\r",
											"const responseData = JSON.parse(responseBody);\r",
											"\r",
											"pmutils(pm).testCallbacks.testAccessToken(responseData.access_token);\r",
											"pmutils(pm).testCallbacks.testIdToken(responseData.id_token);\r",
											"\r",
											"pm.collectionVariables.set(\"access_token\", responseData.access_token);\r",
											"pm.collectionVariables.set(\"id_token\", responseData.id_token);\r",
											"pm.collectionVariables.set(\"refresh_token\", responseData.refresh_token);\r",
											"\r",
											"pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(responseData.access_token);\r",
											"pmutils(pm).testCallbacks.testRefreshTokenRefreshesTokens(responseData.refresh_token);\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "7f619cf4-ddb5-4213-b4bc-70917a866815"
									}
								}
							],
							"id": "077eecc2-5989-468a-9cb1-1e3075283f55",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorization_code}}",
											"type": "text"
										}
									]
								},
								"url": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token"
							},
							"response": [
								{
									"id": "968030f9-3da6-4aba-8f67-abc08e1d2046",
									"name": "Request for tokens",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}",
													"type": "text"
												},
												{
													"key": "assertion",
													"value": "{{id_token}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{client_secret}}",
													"type": "text"
												},
												{
													"key": "state",
													"value": "{{state}}",
													"type": "text"
												}
											]
										},
										"url": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Content-Length",
											"value": "2226"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Server",
											"value": "Microsoft-IIS/10.0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Headers",
											"value": "authorization"
										},
										{
											"key": "X-Powered-By",
											"value": "ASP.NET"
										},
										{
											"key": "Date",
											"value": "Tue, 02 Apr 2024 12:09:40 GMT"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImQzY2QzMjBlLTJiNjUtNDg3YS05ZGM3LTY3MTY3YWFmMzc2NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIGFkZHJlc3MgcGhvbmUgZ3JvdXBzIiwidG9rZW5fdHlwZSI6ImJlYXJlciIsImNsaWVudF9pZCI6InN0TEp3VzliM0w1QlBhaUZGVng5Y0IiLCJuYmYiOjE3MTIwNTk3ODAsImV4cCI6MTcxMjA1OTkwMCwiaWF0IjoxNzEyMDU5NzcxLCJpc3MiOiJodHRwczovL2Nmcy5leGFtcGxlLmNvbS9jZnMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoiaHR0cHM6Ly9jZnMuZXhhbXBsZS5jb20vY2ZzL29hdXRoL3N0b3Jtd2luZCJ9.SAOq0BmiV_fuHwqPDy9p3ZVKqzxz-aQBQVXVEv5zZkaSkNsNb8UIaajuetmUZRXSkgEPK_S0o7ofYZs3djIUkAzioiUjsVn_OyBNvPFUXjDTSf2-2TAH9n2aaCCCdJ-VjFGTRsa59HdGZ_T6YJiuRciEveCJjkjtMmfwgrXby_AUcj4Q_w8AjX3gJ-C_d5dHyjBjtOc1hhREqQcoGs3THoEPrkKlpDADpmFwy0MYIhdExoP0Wkt0iJq5jVK-RxhmRFlG9e0z56tfMp9We2oW2FLFFgIs31gSyMfaN76gE7Kq69QtEL0Ts2dfHgZJvzCN1Gknvb8X69Sp-ZWdTqe_vQ\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 120,\n    \"refresh_token\": \"utYV!IAAAAHPFY1E5n0vU9ZuNx9vJD4N6Vrkt0f6QlMx7Yy5_mgSJsQAAAAHtX1NBmdNB7er1UI3euIaSOPwDp3wU6gP5C4vsBEvUCq560PpJWEAqzriqCV9uzwHLi3wT75EHkEWUVXpDrsdnjlr1jTKghHWgU9ywrL2NhRadQzQO__vvCgv9ihuIlhRBE2-fUNwK_xmSNG0NWlaFiXBTCWiSSxEZRTkstBBr5qDXqaPvwJrL2PII7tgZCy36gy1KTH6sb40c_cWrYqU9GnJX4KBu12Lc8M3gJR3Vsg\",\n    \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImQzY2QzMjBlLTJiNjUtNDg3YS05ZGM3LTY3MTY3YWFmMzc2NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJub25jZSI6ImM0ZmRlZjM1ZjJlMDVhYmUyY2ViODhhZTBmNzQzZWU0IiwibmFtZSI6IlZhcmlhbiBXcnlubiIsImZhbWlseV9uYW1lIjoiV3J5bm4iLCJnaXZlbl9uYW1lIjoiVmFyaWFuIiwiZW1haWwiOiJ2YXJpYW4ud3J5bm5Ac3Rvcm13aW5kLnplciIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJjX2hhc2giOiIxXzc4UXFoT3dya3hUNEtHenBBZU1BIiwiYXRfaGFzaCI6Imx6S3J3RF81ZnhYYjFmWFJ6Ul8zcEEiLCJuYmYiOjE3MTIwNTk3ODAsImV4cCI6MTcxMjA2MDk4MCwiaWF0IjoxNzEyMDU5NzgwLCJpc3MiOiJodHRwczovL2Nmcy5leGFtcGxlLmNvbS9jZnMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoic3RMSndXOWIzTDVCUGFpRkZWeDljQiJ9.RcE6JzSlia6WEcvyLo1VHLe5QTkvhi1kH_o_8sdrzA_zycTrZVaN254e8E29Gk9pNtFzLopXSXsS6t9H0QBpbordABk9ZlZvozNW-b0Al013TQ6U8_yEFYzilIKGl7qtezIhF1ESHYKWBv1sR7e2UNw8uh2xUXLWf7PrnJQFp4IZZxTBpajZeSbxvXvgM7bvkcuFs6hmsQ1H__HtqzfAdjP8eQixE8u5Kc1ayhNM4AVZmTeAjfz3qljQmUhx1uUfcdoQtB75BcPwWuMNL_vIrtEmMAkcwhhxEIh-xG7c3A-cIXa39iRCHXNvl8TEFPuDvvptbq3Uy0uQ0AiTlJwEHg\",\n    \"scope\": \"openid email profile address phone groups\"\n}"
								}
							]
						}
					],
					"id": "6268f2c6-6119-417d-9f91-8cf31ff6b5b6",
					"description": "- Run the \"GET Authorize\" request\n    \n- Run the \"POST Request for tokens\" request"
				},
				{
					"name": "Token - code token",
					"item": [
						{
							"name": "Authorize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
											"\r",
											"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('form', ({ authorization_code, access_token }) => {\r",
											"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
											"    pmutils(pm).testCallbacks.testAccessToken(access_token);\r",
											"    pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(access_token);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "e9094f12-3333-4b2d-aacf-8b0f74b52659"
									}
								}
							],
							"id": "5b4e48b1-5709-4e00-8e45-367a997b4d1e",
							"protocolProfileBehavior": {
								"followRedirects": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code token&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"authorize"
									],
									"query": [
										{
											"key": "response_type",
											"value": "code token"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}"
										},
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback"
										},
										{
											"key": "scope",
											"value": "{{scope}}"
										},
										{
											"key": "state",
											"value": "{{state}}"
										},
										{
											"key": "nonce",
											"value": "{{nonce}}"
										}
									]
								}
							},
							"response": [
								{
									"id": "ad3ef5a7-b78a-42e6-9bcd-01e1d53652e2",
									"name": "Authorize",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=code token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&state={{state}}&nonce={{nonce}}",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"authorize"
											],
											"query": [
												{
													"key": "scope",
													"value": "{{scope}}"
												},
												{
													"key": "response_type",
													"value": "code token"
												},
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}"
												},
												{
													"key": "state",
													"value": "{{state}}"
												},
												{
													"key": "nonce",
													"value": "{{nonce}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Cache-Control",
											"value": "private"
										},
										{
											"key": "Content-Type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "Server",
											"value": "Microsoft-IIS/10.0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Headers",
											"value": "authorization"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Powered-By",
											"value": "ASP.NET"
										},
										{
											"key": "Date",
											"value": "Tue, 02 Apr 2024 12:10:05 GMT"
										},
										{
											"key": "Content-Length",
											"value": "4483"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en-US\">\n    <head>\n        <title>Cloud Federation Service - Authorize the application</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <meta name=\"robots\" content=\"noindex,nofollow\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <link rel=\"stylesheet\" href=\"/cfs/Content/css/base.min.css\" />\n        <link rel=\"stylesheet\" href=\"/cfs/Content/css/login.min.css\" />\n        <link rel=\"stylesheet\" href=\"/cfs/Css/Login/stormwind.css\" />\n    </head>\n    <body>\n        <div>\n            <div class=\"title\">\n                <img class=\"login-picture\" src=\"/cfs/Images/Index/stormwind.png\" alt=\"Stormwind\" />\n            </div>\n            <div data-cfs-page-name=\"oauth2-authorize\" class=\"guest-content\">\n                <p class=\"alert alert-warning\">\n                    <strong>You can use your account to sign in to other sites and services.</strong>\r\n        By signing here, you can use Test OIDC Application without sharing your password.\n                </p>\n                <h3 class=\"dark\">Authorize Test OIDC Application to use your account?</h3>\n                <p class=\"dark\">This application \n                    <span class=\"text-success\">will be able to</span>:\n                </p>\n                <ul class=\"dark\">\n                    <li>Get your email address.</li>\n                    <li>Get your basic profile information.</li>\n                    <li>Get your address.</li>\n                    <li>Get your phone number.</li>\n                    <li>Get your groups.</li>\n                </ul>\n                <p id=\"javascriptDisabled\" class=\"alert alert-danger\">\n                    <strong>Javascript appears to be disabled in your browser.</strong>\r\n        This page requires Javascript to be enabled to better protect your security.\n                </p>\n                <form action=\"/cfs/oauth/stormwind/authorize?scope=openid%20email%20profile%20address%20phone%20groups&amp;response_type=code%20token&amp;redirect_uri=https://oauth.pstmn.io/v1/callback&amp;client_id=stLJwW9b3L5BPaiFFVx9cB&amp;state=6879bf2ef296d720f3a54eb8faabee9c&amp;nonce=c4fdef35f2e05abe2ceb88ae0f743ee4\" method=\"post\">\n                    <input name=\"__RequestVerificationToken\" type=\"hidden\" value=\"UxCkT84Nrdm5r-74zKnPp_FvU81lFex-tOv1oz6Aed3KsyZZXk7gZQyCyiIpkdwt2hO8E8z27K8h9VUeH9bqRIOzhYJMa0WmrlzF-XVqqCaObgmchLDQw4nON8kb-ZpQFT_GAlFQblP4rhL8vncsaw2\" />\n                    <input id=\"IsApproved\" name=\"IsApproved\" type=\"hidden\" value=\"\" />\n                    <input id=\"client_id\" name=\"client_id\" type=\"hidden\" value=\"stLJwW9b3L5BPaiFFVx9cB\" />\n                    <input id=\"redirect_uri\" name=\"redirect_uri\" type=\"hidden\" value=\"https://oauth.pstmn.io/v1/callback\" />\n                    <input id=\"state\" name=\"state\" type=\"hidden\" value=\"6879bf2ef296d720f3a54eb8faabee9c\" />\n                    <input id=\"scope\" name=\"scope\" type=\"hidden\" value=\"openid email profile address phone groups\" />\n                    <input id=\"response_type\" name=\"response_type\" type=\"hidden\" value=\"code token\" />\n                    <input id=\"nonce\" name=\"nonce\" type=\"hidden\" value=\"c4fdef35f2e05abe2ceb88ae0f743ee4\" />\n                    <div id=\"responseButtonsDiv\" class=\"clearfix\" style=\"margin-top: 15px; margin-bottom: 15px;\">\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-primary btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = true; return true;\">\r\n                    Accept\r\n                </button>\n                        </div>\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-warning btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = false; return true;\">\r\n                    Cancel\r\n                </button>\n                        </div>\n                    </div>\n                </form>\n                <div class=\"clearfix\">\n                    <p class=\"alert alert-info alert-footer\">You can revoke access to any application at any time from your Security page.</p>\n                </div>\n            </div>\n        </div>\n        <script src=\"/cfs/Scripts/base.min.js\"></script>\n        <script language=\"javascript\" type=\"text/javascript\">\r\n        document.getElementById('responseButtonsDiv').style.display = 'block';\r\n        document.getElementById('javascriptDisabled').style.display = 'none';\r\n\r\n        if (document.location !== window.top.location) {\r\n            window.top.location = document.location;\r\n        }\r\n    </script>\n    </body>\n</html>"
								}
							]
						},
						{
							"name": "Request for tokens",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pmutils(pm).testCallbacks.testResponseStatus200();\r",
											"\r",
											"const responseData = JSON.parse(responseBody);\r",
											"\r",
											"pmutils(pm).testCallbacks.testAccessToken(responseData.access_token);\r",
											"pmutils(pm).testCallbacks.testIdToken(responseData.id_token);\r",
											"\r",
											"pm.collectionVariables.set(\"access_token\", responseData.access_token);\r",
											"pm.collectionVariables.set(\"id_token\", responseData.id_token);\r",
											"pm.collectionVariables.set(\"refresh_token\", responseData.refresh_token);\r",
											"\r",
											"pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(responseData.access_token);\r",
											"pmutils(pm).testCallbacks.testRefreshTokenRefreshesTokens(responseData.refresh_token);\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"id": "3238891c-5671-47c2-bc05-0a05ecdc37af"
									}
								}
							],
							"id": "21b206a1-bdc5-4e76-bfb6-823660fcbc3e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorization_code}}",
											"type": "text"
										}
									]
								},
								"url": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token"
							},
							"response": [
								{
									"id": "47481ccf-086d-4590-9d95-75ff6ad38f5b",
									"name": "Request for tokens",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}",
													"type": "text"
												},
												{
													"key": "assertion",
													"value": "{{id_token}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{client_secret}}",
													"type": "text"
												},
												{
													"key": "state",
													"value": "{{state}}",
													"type": "text"
												}
											]
										},
										"url": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Content-Length",
											"value": "2226"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Server",
											"value": "Microsoft-IIS/10.0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Headers",
											"value": "authorization"
										},
										{
											"key": "X-Powered-By",
											"value": "ASP.NET"
										},
										{
											"key": "Date",
											"value": "Tue, 02 Apr 2024 12:10:15 GMT"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImQzY2QzMjBlLTJiNjUtNDg3YS05ZGM3LTY3MTY3YWFmMzc2NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIGFkZHJlc3MgcGhvbmUgZ3JvdXBzIiwidG9rZW5fdHlwZSI6ImJlYXJlciIsImNsaWVudF9pZCI6InN0TEp3VzliM0w1QlBhaUZGVng5Y0IiLCJuYmYiOjE3MTIwNTk4MTUsImV4cCI6MTcxMjA1OTkzNSwiaWF0IjoxNzEyMDU5ODA1LCJpc3MiOiJodHRwczovL2Nmcy5leGFtcGxlLmNvbS9jZnMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoiaHR0cHM6Ly9jZnMuZXhhbXBsZS5jb20vY2ZzL29hdXRoL3N0b3Jtd2luZCJ9.Y38xkXDEyaXdyvB09ZDraPPeO8s-DVoCk33ZS0rnMVyJjDzMoGHU6J1qRLeflEhiP7sS5bpFgWalcn-rdOQgVrQJ8HehhuvI-Xo6oHhrwJSswEKRRtkWBwKXRHVQqSMvI9zoQ1pVaO2aacu1AS1DMLCT0Q_iSFwoQUmfH9LG5gXGB0JDSRdyYG-AjYDyEB_aSd2g_PmWFPyhNfERblqk13gVF9zRf_zdNV824TYeTymcplfQuCGvFw4WNBvUiH6AC7DdzNIdWrTBH4shQWTKNsxB76l1x3CK-TOOQs9vgLs0n1JRtOJ0pMKMS4oO93rHpsn3AbZtBg_yWJXPyROHtg\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 120,\n    \"refresh_token\": \"utYV!IAAAAATFA9yY9J8FfBIcOyDe9zcjqmKVScOKQgkj0eM_7CORsQAAAAHfJNwKMENeCqFg_em6nXtOtL7er8zEzkEETs9Bu8qPT0UBSHuvtQ1qxqaB4mchbuuYwbmNnMUHSZeXJNJB8jL7DYUg0Y4sWuBYiDrEmRMU3ecxKVk-A59lxqge4GSxj2SpY2Fhg7Kfi9AxEdVZklVfy1d25B065oGsIRwKuIMCsfaBJsrD0E6fnm6EzlQP71MfCzxy0mOPsP4IY9qoHH7Ml77JeqOgglSYgTj7gxt2dg\",\n    \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImQzY2QzMjBlLTJiNjUtNDg3YS05ZGM3LTY3MTY3YWFmMzc2NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJub25jZSI6ImM0ZmRlZjM1ZjJlMDVhYmUyY2ViODhhZTBmNzQzZWU0IiwibmFtZSI6IlZhcmlhbiBXcnlubiIsImZhbWlseV9uYW1lIjoiV3J5bm4iLCJnaXZlbl9uYW1lIjoiVmFyaWFuIiwiZW1haWwiOiJ2YXJpYW4ud3J5bm5Ac3Rvcm13aW5kLnplciIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJjX2hhc2giOiJhWDYzQXV3SWtuN0tWcmxfaDIzcWVBIiwiYXRfaGFzaCI6ImJsUU5CVGJaRjhMX2ZrOHMyUnpLNVEiLCJuYmYiOjE3MTIwNTk4MTUsImV4cCI6MTcxMjA2MTAxNSwiaWF0IjoxNzEyMDU5ODE1LCJpc3MiOiJodHRwczovL2Nmcy5leGFtcGxlLmNvbS9jZnMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoic3RMSndXOWIzTDVCUGFpRkZWeDljQiJ9.dT9zdLE7tTEL9SAAZ3fV_6LRau4HRjy6cKTRyhqz8utCnc1SetQbWoYAauZAqIFOM6_7cncIJ6ktuN37XbW-WlrxRp-IzHawd5hoLO7qr99zXDnGy6wX8X-DMtbsNP8OkXpqjZH0q1vG4C9zPZzHCQzZNKn7gM78pjPHIz4LpJB7dpeP5JglmBvxpZ1wJBqeyRetLc7Ltnm0h1SonPonH9-MVAFo5hNJ-aQBfPlWAnHquuKHxPdQzlvaZFgH2N35lIdFG0FBHXvcxX6EXloxdpc5Im8u2HgQimwP1B-Xi2UO6fTIj5EjkE_DtfezlcwFppN-ZOocnCEB4ASynuB56Q\",\n    \"scope\": \"openid email profile address phone groups\"\n}"
								}
							]
						}
					],
					"id": "0714fbb0-fc60-4d52-845a-12d66afc6041",
					"description": "- Run the \"GET Authorize\" request\n    \n- Run the \"POST Request for tokens\" request"
				}
			],
			"id": "4180c3c6-d191-41ea-ac9b-c5e5711a4ae9",
			"description": "- Run the \"GET Authorize\" request\n    - The response will contain an `authorization_code` and an `access_token`, an `id_token`, or both that will be automatically captured and set as collection variables\n- Run the \"POST Request for tokens\" request\n    - The response will contain an `access_token`, `id_token`, `refresh_token` that will be automatically captured and set as collection variables to be used for any subsequent requests that require authentication\n\n**N.B.:** The \"Automatically follow redirects\" setting must be **disabled** in Postman in order to run the requests in this folder!\n\n<img src=\"https://content.pstmn.io/e920769a-172e-49da-a73d-9b6a531ce945/aW1hZ2UucG5n\" width=\"846\" height=\"840\">\n\n## The Authorize Endpoint Request\n\n- Method: `GET`\n- Agent: Browser\n- Response Type: POST to pre-registered callback URL at client with parameters in the POST body\n    \n\n### Request Parameters\n\n| Parameter | Value | Mandatory | Description |\n| --- | --- | --- | --- |\n| response_type | `code token` or `code id_token` or `code id_token token` | yes | Defines the flow type: hybrid flow |\n| client_id | The Client ID | yes | The ID of the OAuth client. |\n| redirect_uri | The client callback URL | yes | The callback URL configured for the client. |\n| scope | Space separated string of scopes | yes | List the scopes the client is requesting access to. **OpenID Connect requests MUST contain the** **`openid`** **scope**. |\n| state | A random value | no | Will be provided back to the client in the redirect URL. Useful to keep track of the session in the client or to prevent unsolicited flows. |\n| nonce | A random value | no | A string value used to mitigate replay attacks by associating the client session with the ID token. |\n\n### Response\n\nA POST back to the `redirect_uri`. The parameters are provided in the POST body.\n\n| Parameter | Value | Mandatory | Description |\n| --- | --- | --- | --- |\n| access_token | A newly issued access token | no\\* | The resulting access token for the flow. \\*Mandatory if access token is requested in the `response_type`. |\n| token_type | `Bearer` or other token type | yes | Describes how the token can be used. Most commonly Bearer token usage. |\n| expires_in | Expiration in seconds | yes | The time to live of the token in seconds. |\n| scope | Space separated string | yes | The issued scopes may differ from the requested scopes. |\n| id_token | JSON Web Token | no\\* | The resulting ID token for the flow. \\*Mandatory if ID token is requested in the `response_type`. |\n| code | An Authorization Code | yes | An authorization code nonce, to be used in the token request. |\n| state | The same value as given in the request | yes\\* | The same value as the client sent in the request. Use to match request to the redirect response. \\*Mandatory if the state was sent in the request. |\n\n## The Token Endpoint Request\n\n### Request Parameters\n\n- Method: `POST`\n- Content-Type: `application/x-www-form-urlencoded`\n- Response Type: `json`\n    \n\n| Parameter | Value | Mandatory | Description |\n| --- | --- | --- | --- |\n| grant_type | `authorization_code` | yes | Tells the token endpoint to do the second part of the flow. |\n| client_id | The Client ID | yes | The ID of the requesting client. |\n| client_secret | The client secret | yes | The secret of the client. |\n| redirect_uri | The callback URL of the Client | yes | The same redirect URI as was sent in the Authorization request. |\n| code | The authorization code | yes | The code given in the response of the Authorization request. |\n\n### Response\n\n- Response Type: `application/json`\n    \n\n| Parameter | Value | Mandatory | Description |\n| --- | --- | --- | --- |\n| access_token | A newly issued access token | yes | The resulting access token for the flow. |\n| token_type | `Bearer` or other token type | yes | Describes how the token can be used. Most commonly Bearer token usage. |\n| expires_in | Expiration in seconds | yes | The time to live of the access token in seconds. |\n| scope | Space separated string | yes | The issued scopes may differ from the requested scopes. |\n| refresh_token | A newly issued refresh token | yes | The resulting refresh token for the flow. |\n| id_token | A newly issued ID token | yes | The resulting ID token for the flow. |"
		},
		{
			"name": "Client credentials",
			"item": [
				{
					"name": "Request for access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pmutils(pm).testCallbacks.testResponseStatus200();",
									"",
									"const responseData = pm.response.json();",
									"",
									"pmutils(pm).testCallbacks.testAccessToken(responseData.access_token);",
									"",
									"pm.collectionVariables.set(\"access_token\", responseData.access_token);",
									"",
									"pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(responseData.access_token);",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "62a0e88d-5cbf-4cce-bb39-9015b484e063"
							}
						}
					],
					"id": "5157903a-bf3d-4d3c-9d07-0b6abeb6e6f1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "{{scope}}",
									"type": "text"
								}
							]
						},
						"url": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token"
					},
					"response": [
						{
							"id": "16ad4283-c96a-477e-a6fd-d41a7531fc2e",
							"name": "Request for access token",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{scope}}",
											"type": "text"
										},
										{
											"key": "state",
											"value": "{{state}}",
											"type": "text"
										},
										{
											"key": "nonce",
											"value": "{{nonce}}",
											"type": "text"
										}
									]
								},
								"url": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Content-Length",
									"value": "948"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Server",
									"value": "Microsoft-IIS/10.0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "authorization"
								},
								{
									"key": "X-Powered-By",
									"value": "ASP.NET"
								},
								{
									"key": "Date",
									"value": "Tue, 02 Apr 2024 12:10:40 GMT"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImQzY2QzMjBlLTJiNjUtNDg3YS05ZGM3LTY3MTY3YWFmMzc2NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJzdExKd1c5YjNMNUJQYWlGRlZ4OWNCIiwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSBhZGRyZXNzIHBob25lIGdyb3VwcyIsInRva2VuX3R5cGUiOiJiZWFyZXIiLCJjbGllbnRfaWQiOiJzdExKd1c5YjNMNUJQYWlGRlZ4OWNCIiwibmJmIjoxNzEyMDU5ODQwLCJleHAiOjE3MTIwNTk5NjAsImlhdCI6MTcxMjA1OTg0MCwiaXNzIjoiaHR0cHM6Ly9jZnMuZXhhbXBsZS5jb20vY2ZzL29hdXRoL3N0b3Jtd2luZCIsImF1ZCI6Imh0dHBzOi8vY2ZzLmV4YW1wbGUuY29tL2Nmcy9vYXV0aC9zdG9ybXdpbmQifQ.O-c6ARixHNdF9GeBZSYnNLLh1xuPSwmXDk0LD3d9T952eDVXjv280hAKVlOVlE7mvjmBwoFMTDcSsP6rZmydnECgqNJmMzvb7gI6fN4O3lNU_G5rn2NeNzfP4ztE7_OamGfX3TdZGDaoUuQoXwq-vihQnLSC4J4L1GUT94T6EDxenN_9ny-P4kh5IuMtMAoXuKzdkpr9zvIqV9UwhFuh9VBABObT-gN5b0Bap33b9AYI9XdmL--J--_RNNvBFOjQLgxNPTfszkYgw8GVdrnkAur_h7E1uBQYFTT5KE5dVy9-QnNWPCHFQm7BneyGUNih73zhaPssE2Z7VK1TcmiTkA\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 120,\n    \"scope\": \"openid email profile address phone groups\"\n}"
						}
					]
				}
			],
			"id": "27e4ab54-aff0-4ba4-a66e-e26b0b5dbc10",
			"description": "- Run the \"POST Request for access token\" request\n    - The response will contain an `access_token`, that will be automatically captured and set as a collection variable to be used for any subsequent requests that require authentication\n\nNote that this `access_token`'s `sub` claim's value is the client_id (`{{client_id}}`) instead of the username (`{{username}}`) since the token is not associated with a specific user, but with the OAuth client itself.\n\n## The Token Endpoint\n\n### Request Parameters\n\n- Method: `POST`\n- Content-Type: `application/x-www-form-urlencoded`\n- Response Type: `json`\n    \n\n| Parameter | Value | Mandatory | Description |\n| --- | --- | --- | --- |\n| grant_type | `client_credentials` | yes | Tells the token endpoint to do perform the client credentials flow. |\n| client_id | The Client ID | yes | The ID of the OAuth client. |\n| client_secret | The client secret | yes | The secret of the OAuth client. |\n| scope | Space separated string of scopes | yes | List the scopes the client is requesting access to. **OpenID Connect requests MUST contain the** **`openid`** **scope**. |\n\n### Response\n\n- Response Type: `application/json`\n    \n\n| Parameter | Value | Mandatory | Description |\n| --- | --- | --- | --- |\n| access_token | A newly issued access token | yes | The resulting access token for the code flow. |\n| expires_in | Expiration in seconds | yes | The time to live of the access token in seconds. |\n| token_type | `Bearer` or other token type | yes | Describes how the token can be used. Most commonly Bearer token usage. |\n| scope | Space separated string | yes | The issued scopes may differ from the requested scopes. |"
		},
		{
			"name": "Resource owner password credentials",
			"item": [
				{
					"name": "Request for access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pmutils(pm).testCallbacks.testResponseStatus200();",
									"",
									"const responseData = pm.response.json();",
									"",
									"pmutils(pm).testCallbacks.testAccessToken(responseData.access_token);",
									"",
									"pm.collectionVariables.set(\"access_token\", responseData.access_token);",
									"",
									"pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(responseData.access_token);",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"id": "ef4d30f9-3dd6-4be0-b1be-31e995ca7fa9"
							}
						}
					],
					"id": "27b88059-360f-424e-9642-24b5b52ff7f9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{resource_owner_password_credentials_username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "{{scope}}",
									"type": "text"
								}
							]
						},
						"url": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token"
					},
					"response": [
						{
							"id": "902f561d-a3e4-4850-a8d1-ffa78e5bc413",
							"name": "Request for access token",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{scope}}",
											"type": "text"
										},
										{
											"key": "state",
											"value": "{{state}}",
											"type": "text"
										},
										{
											"key": "nonce",
											"value": "{{nonce}}",
											"type": "text"
										}
									]
								},
								"url": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Content-Length",
									"value": "888"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Server",
									"value": "Microsoft-IIS/10.0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "authorization"
								},
								{
									"key": "X-SourceFiles",
									"value": "=?UTF-8?B?WDpcc291cmNlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcdG9rZW4=?="
								},
								{
									"key": "X-Powered-By",
									"value": "ASP.NET"
								},
								{
									"key": "Date",
									"value": "Wed, 13 Mar 2024 14:02:23 GMT"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjI0ZjAyYWNjLWM2NjItNDliYS04NmMxLWE4MmUxMjY5NGU3ZSIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxczJvOTg1bElmMkZhMkRpNVpnMG1KIiwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsInRva2VuX3R5cGUiOiJiZWFyZXIiLCJjbGllbnRfaWQiOiIxczJvOTg1bElmMkZhMkRpNVpnMG1KIiwibmJmIjoxNzEwMzM4NTQzLCJleHAiOjE3MTAzMzg2NjMsImlhdCI6MTcxMDMzODU0MywiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NDQzMDMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NDQzMDMvb2F1dGgvc3Rvcm13aW5kIn0.EsI-e_GP1ntXoOzk9nsIJUEjY3GtHJ8niZSUdCPQBYQp7JyncPysE27YdOIrf8y_9JWHLnSVhCToA6BnsxmoZJV1NLiwQ-HZHhi9jMC022RsPGm0pao41R6dYcKZA26xr2tnYDmutYXKMAgq5xWiapqYBY_2YkgwLp3ZNh618wQt2YOgdkXOlKSYG-tfu-kfHhEfJ5BD9yrT85jc0ZZfZFsjKJGlSZubs5KYiDifF5RSumDQPgfFYUJ6AsVrO-sYGOqE02VN6Qfwzmkq-PTC0zPnwqgUtRfTh41mbZ0H0kCg0-jq0WhU_jMREaVqJ9SJmc2RMI-z-ZdidLBXk7t1dA\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 120,\n    \"scope\": \"openid email profile\"\n}"
						}
					]
				}
			],
			"id": "e319833c-2772-4f79-adaf-cc9b7a4e6721",
			"description": "- Run the \"POST Request for access token\" request\n    - The response will contain an `access_token`, that will be automatically captured and set as a collection variable to be used for any subsequent requests that require authentication\n\n## The Token Endpoint\n\n### Request Parameters\n\n- Method: `POST`\n- Content-Type: `application/x-www-form-urlencoded`\n- Response Type: `json`\n    \n\n| Parameter | Value | Mandatory | Description |\n| --- | --- | --- | --- |\n| grant_type | `password` | yes | Tells the token endpoint to do perform the resource owner password credential flow. |\n| client_id | The Client ID | yes | The ID of the OAuth client. |\n| client_secret | The client secret | yes | The secret of the OAuth client. |\n| username | the username | yes | The username of the resource owner. |\n| password | the user password | yes | The password of the resource owner.l |\n| scope | Space separated string of scopes | yes | List the scopes the client is requesting access to. **OpenID Connect requests MUST contain the** **`openid`** **scope**. |\n\n### Response\n\n- Response Type: `application/json`\n    \n\n| Parameter | Value | Mandatory | Description |\n| --- | --- | --- | --- |\n| access_token | A newly issued access token | yes | The resulting access token for the flow. |  \n| expires_in | Expiration in seconds | yes | The time to live of the access token in seconds. |  \n| token_type | `Bearer` or other token type | yes | Describes how the token can be used. Most commonly Bearer token usage. |  \n| scope | Space separated string | yes | The issued scopes may differ from the requested scopes. |\n| refresh_token | A newly issued refresh token | yes | The resulting refresh token for the flow. |"
		},
		{
			"name": "Validations",
			"item": [
				{
					"name": "Common",
					"item": [
						{
							"name": "Authorize",
							"item": [
								{
									"name": "Invalid client id",
									"item": [
										{
											"name": "Authorize",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseData = pm.response.json();\r",
															"\r",
															"pmutils(pm).testCallbacks.testResponseStatus(400);\r",
															"\r",
															"pm.test('Response body has error \"invalid_client\"', () => {\r",
															"    pm.expect(responseData).to.have.property('error', 'invalid_client');\r",
															"});\r",
															"\r",
															"pm.test('Response body has error_description', () => {\r",
															"    pm.expect(responseData).to.have.property('error_description');\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"id": "7ed26307-2c2a-44b8-ae52-90e5ec71ff23"
													}
												}
											],
											"id": "a0bacbde-0ad9-4617-ba46-9a35cae0be0a",
											"protocolProfileBehavior": {
												"followRedirects": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type={{validations_common_response_type}}&client_id=invalidClientId&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "response_type",
															"value": "{{validations_common_response_type}}"
														},
														{
															"key": "client_id",
															"value": "invalidClientId"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "f1f04b39-b8d3-42ce-b15d-5bcda59d0208",
									"description": "Demonstrates the case where the value for the `client_id` parameter is invalid (i.e. there is not client associated with the specified client_id).\n\nSee the **Tests** tab of the \"Authorize\" request for the expected errors."
								},
								{
									"name": "Invalid callback url",
									"item": [
										{
											"name": "Authorize",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseData = pm.response.json();\r",
															"\r",
															"pmutils(pm).testCallbacks.testResponseStatus(400);\r",
															"\r",
															"pm.test('Response body has error \"invalid_request\"', () => {\r",
															"    pm.expect(responseData).to.have.property('error', 'invalid_request');\r",
															"});\r",
															"\r",
															"pm.test('Response body has error_description', () => {\r",
															"    pm.expect(responseData).to.have.property('error_description');\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"id": "cb736388-ec0a-42db-a19c-4727aacb1141"
													}
												}
											],
											"id": "f3cd0789-9c9f-47a3-9938-7ea953d42962",
											"protocolProfileBehavior": {
												"followRedirects": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type={{validations_common_response_type}}&client_id={{client_id}}&redirect_uri=https://invalid.callback.url.example.com/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "response_type",
															"value": "{{validations_common_response_type}}"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "redirect_uri",
															"value": "https://invalid.callback.url.example.com/callback"
														},
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "7f40b212-6b04-4a0a-a9eb-690cd9c858bf",
									"description": "Demonstrates the case where the value for the `redirect_uri` parameter is invalid (i.e. the value for the redirect_uri is not the same as the value for the registered callback URL).\n\nSee the **Tests** tab of the \"Authorize\" request for the expected errors."
								},
								{
									"name": "Invalid scope(s) only",
									"item": [
										{
											"name": "Authorize",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseData = pm.response.json();\r",
															"\r",
															"pmutils(pm).testCallbacks.testResponseStatus(400);\r",
															"\r",
															"pm.test('Response body has error \"invalid_scope\"', () => {\r",
															"    pm.expect(responseData).to.have.property('error', 'invalid_scope');\r",
															"});\r",
															"\r",
															"pm.test('Response body has error_description', () => {\r",
															"    pm.expect(responseData).to.have.property('error_description');\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"id": "59dc1277-f0bf-461a-8b11-9d35b3915697"
													}
												}
											],
											"id": "63e2c8c2-b2f4-466a-b76c-25b029db3bca",
											"protocolProfileBehavior": {
												"followRedirects": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type={{validations_common_response_type}}&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope=invalidScope&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "response_type",
															"value": "{{validations_common_response_type}}"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "scope",
															"value": "invalidScope"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "e06b2ce4-cbb7-4be1-9548-519efc47fd0d",
									"description": "Demonstrates the case where the value for the `scope` parameter is invalid (i.e. the list of space separated scopes contains **ONLY invalid scopes**).\n\nSee the **Tests** tab of the \"Authorize\" request for the expected errors."
								},
								{
									"name": "Expired access token",
									"item": [
										{
											"name": "Authorize",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
															"\r",
															"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('hash', ({ access_token, id_token }) => {\r",
															"    const atob = require('atob');\r",
															"    const jwtPayload = JSON.parse(atob(access_token.split('.')[1]));\r",
															"    const exp = jwtPayload.exp;\r",
															"    // Wait until exp + 1 second\r",
															"    const wait = (exp * 1000 - Date.now()) + 1000;\r",
															"\r",
															"    console.log(`Waiting ${wait}ms for access token to expire...`);\r",
															"    setTimeout(() => {\r",
															"        pm.sendRequest(\r",
															"            {\r",
															"                url: pm.variables.get('CFS Master URL') + '/oauth/' + pm.variables.get('Tenant Name') + '/userinfo',\r",
															"                method: 'GET',\r",
															"                header: {\r",
															"                    Authorization: 'Bearer ' + access_token\r",
															"                }\r",
															"            },\r",
															"            (err, response) => {\r",
															"                pm.test(\"Expired access token does not grant access to resources\", () => {\r",
															"                    pm.expect(err).to.be.null;\r",
															"                    if (err) {\r",
															"                        console.error(err);\r",
															"                        return;\r",
															"                    }\r",
															"\r",
															"                    pm.expect(response.code).to.be.equal(401);\r",
															"                });\r",
															"            }\r",
															"        );\r",
															"    }, wait);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"id": "22929f58-27e4-4b93-a7e4-dca19a065b01"
													}
												}
											],
											"id": "c6e6af1b-1d13-4c75-8f82-f03705389b43",
											"protocolProfileBehavior": {
												"followRedirects": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=id_token token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&scope={{scope}}&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "response_type",
															"value": "id_token token"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "6d02c331-8f3b-4394-b911-0fe23138631b",
									"description": "Demonstrates the case where the `access_token` is used to access resources after it has already expired. The request will acquire an access token and wait for it to expire before trying to use it to access the UserInfo endpoint.\n\nSee the **Tests** tab of the \"Authorize\" request for the expected errors."
								}
							],
							"id": "843eeae4-7b2b-4400-98c9-fe825d778889",
							"description": "Validations for the Authorization endpoint."
						}
					],
					"id": "3d79c45a-4d01-4e88-b87b-8cc79c9573e5",
					"description": "Common validations for all the flows."
				},
				{
					"name": "Authorization code flow + Authorization code flow with PKCE + Hybrid Flow",
					"item": [
						{
							"name": "Token",
							"item": [
								{
									"name": "Invalid authorization code",
									"item": [
										{
											"name": "Request for tokens",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus(400);\r",
															"\r",
															"const responseData = pm.response.json();\r",
															"\r",
															"pm.test('Response body has error \"invalid_grant\"', () => {\r",
															"    pm.expect(responseData).to.have.property('error', 'invalid_grant');\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"id": "2bbd0664-39d0-459b-bc09-3f7bff83de84"
													}
												}
											],
											"id": "33423134-7905-4f12-be09-9758e3069393",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "{{client_secret}}",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback",
															"type": "text"
														},
														{
															"key": "code",
															"value": "invalidAuthorizationCode",
															"type": "text"
														}
													]
												},
												"url": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token"
											},
											"response": []
										}
									],
									"id": "469de63d-2416-4d93-907b-653d5d8e1a82",
									"description": "Demonstrates the case where the value for the `code` parameter is invalid (i.e. trying to reuse an authorization code, or trying to use an expired code).\n\nSee the **Tests** tab of the \"Token\" request for the expected errors."
								},
								{
									"name": "Invalid client id",
									"item": [
										{
											"name": "Authorize",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
															"\r",
															"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('query', ({ authorization_code }) => {\r",
															"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"id": "25b50196-05bc-4a6c-b0db-d19063b393d5"
													}
												}
											],
											"id": "8a9d3fe5-e405-4f31-8c17-79f0c1c9ba96",
											"protocolProfileBehavior": {
												"followRedirects": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "response_type",
															"value": "code"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Request for tokens",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus(400);\r",
															"\r",
															"const responseData = pm.response.json();\r",
															"\r",
															"pm.test('Response body has error \"invalid_client\"', () => {\r",
															"    pm.expect(responseData).to.have.property('error', 'invalid_client');\r",
															"});\r",
															"\r",
															"pm.test('Response body has error_description', () => {\r",
															"    pm.expect(responseData).to.have.property('error_description');\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"id": "7172df20-4ecb-4785-b7fb-239421de4e93"
													}
												}
											],
											"id": "3a085c55-d99a-408c-ae08-e6d15b219ad3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "invalidClientId",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "{{client_secret}}",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorization_code}}",
															"type": "text"
														}
													]
												},
												"url": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token"
											},
											"response": []
										}
									],
									"id": "8614d9dd-6231-423e-bcef-bf113090be67",
									"description": "Demonstrates the case where the value for the `client_id` parameter is invalid (i.e. there is not client associated with the specified client_id).\n\nSee the **Tests** tab of the \"Token\" request for the expected errors."
								},
								{
									"name": "Invalid client secret",
									"item": [
										{
											"name": "Authorize",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
															"\r",
															"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('query', ({ authorization_code }) => {\r",
															"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"id": "32c1502c-9a56-4c79-aee1-98c213fd8e57"
													}
												}
											],
											"id": "e5b68fc7-eb06-42f0-8d28-7ef4a1048136",
											"protocolProfileBehavior": {
												"followRedirects": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "response_type",
															"value": "code"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Request for tokens",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus(401);\r",
															"\r",
															"const responseData = pm.response.json();\r",
															"\r",
															"pm.test('Response body has error \"invalid_client\"', () => {\r",
															"    pm.expect(responseData).to.have.property('error', 'invalid_client');\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"id": "fa620680-f5da-4631-8c42-f384bc363cae"
													}
												}
											],
											"id": "8c85e120-d28e-43b7-8e1e-3cef8f16df0e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "invalidClientSecret",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorization_code}}",
															"type": "text"
														}
													]
												},
												"url": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token"
											},
											"response": []
										}
									],
									"id": "f503e504-0a76-4cb9-bbbc-d3e3fa782601",
									"description": "Demonstrates the case where the value for the `client_secret` parameter is invalid (i.e. the client associated with the passed `client_id` does not have the same secret as the value passed for the `client_secret` parameter).\n\nSee the **Tests** tab of the \"Token\" request for the expected errors."
								},
								{
									"name": "Invalid scope(s) + valid scope(s)",
									"item": [
										{
											"name": "Authorize",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
															"\r",
															"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('query', ({ authorization_code }) => {\r",
															"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"id": "456a712c-459a-4c1e-958c-e322e75ee10b"
													}
												}
											],
											"id": "d571a350-26b8-427b-90c4-a53f8b4bafd7",
											"protocolProfileBehavior": {
												"followRedirects": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope=openid email invalidScope&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "response_type",
															"value": "code"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "scope",
															"value": "openid email invalidScope"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Request for tokens",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus200();\r",
															"\r",
															"const responseData = pm.response.json();\r",
															"\r",
															"pmutils(pm).testCallbacks.testAccessToken(responseData.access_token, {\r",
															"    expectedScopes: ['openid', 'email']\r",
															"});\r",
															"pmutils(pm).testCallbacks.testIdToken(responseData.id_token);\r",
															"\r",
															"pm.collectionVariables.set(\"access_token\", responseData.access_token);\r",
															"pm.collectionVariables.set(\"id_token\", responseData.id_token);\r",
															"pm.collectionVariables.set(\"refresh_token\", responseData.refresh_token);\r",
															"\r",
															"pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(responseData.access_token);\r",
															"pmutils(pm).testCallbacks.testRefreshTokenRefreshesTokens(responseData.refresh_token);\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"id": "5aaa9c87-7389-4617-9945-4f25cf213bd3"
													}
												}
											],
											"id": "7019beeb-ba27-4a86-a1a4-ea8d8de59245",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "{{client_secret}}",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorization_code}}",
															"type": "text"
														}
													]
												},
												"url": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token"
											},
											"response": []
										}
									],
									"id": "e8861941-452a-410f-bc2c-87848f91181d",
									"description": "Demonstrates the case where the value for the `scope` parameter contains BOTH valid and invalid scopes. The expected behavior is that the returned `access_token` only contains the valid scopes.\n\nSee the **Tests** tab of the \"Token\" request for the expected behavior."
								},
								{
									"name": "Invalid response access token",
									"item": [
										{
											"name": "Authorize",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
															"\r",
															"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('query', ({ authorization_code }) => {\r",
															"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"id": "a0b420ff-16f5-4148-a509-2841a0ffdb3e"
													}
												}
											],
											"id": "94ca7efd-3a87-450e-9f3e-2ac7ccf5478a",
											"protocolProfileBehavior": {
												"followRedirects": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "response_type",
															"value": "code"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Request for tokens",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus200();\r",
															"\r",
															"// pretend the server responded with an invalid access token\r",
															"const access_token = \"invalidAccessToken\";\r",
															"pm.test(\"Invalid access token decoding fails\", () => {\r",
															"    const atob = require('atob');\r",
															"\r",
															"    pm.expect(() => JSON.parse(atob(access_token))).to.throw();\r",
															"});\r",
															"\r",
															"pm.sendRequest(\r",
															"    {\r",
															"        url: pm.variables.get('CFS Master URL') + '/oauth/' + pm.variables.get('Tenant Name') + '/userinfo',\r",
															"        method: 'GET',\r",
															"        header: {\r",
															"            Authorization: 'Bearer ' + access_token\r",
															"        }\r",
															"    },\r",
															"    (err, response) => {\r",
															"        pm.test(\"Invalid access token does not grant access to resources\", () => {\r",
															"            pm.expect(err).to.be.null;\r",
															"            if (err) {\r",
															"                console.error(err);\r",
															"                return;\r",
															"            }\r",
															"\r",
															"            pm.expect(response.code).to.be.equal(401);\r",
															"        });\r",
															"    }\r",
															");\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"id": "f02b3e45-4f9c-4615-ac7b-07f5db5c0459"
													}
												}
											],
											"id": "e7b2c8a8-927c-4cf4-b906-702272d6fed8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "{{client_secret}}",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorization_code}}",
															"type": "text"
														},
														{
															"key": "state",
															"value": "{{state}}",
															"type": "text"
														}
													]
												},
												"url": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token"
											},
											"response": []
										}
									],
									"id": "42744407-d516-4cad-bd2d-27a0f6fce3bc",
									"description": "Demonstrates the case where the response might contain an invalid `access_token`. The post-request script will try to use an invalid access token to access the UserInfo endpoint.\n\nSee the **Tests** tab of the \"Token\" request for the expected errors."
								},
								{
									"name": "Invalid response id token",
									"item": [
										{
											"name": "Authorize",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
															"\r",
															"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('query', ({ authorization_code }) => {\r",
															"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"id": "8f905cf4-5ec6-46de-b0e3-62d904e308d1"
													}
												}
											],
											"id": "bdd37299-d547-4a4e-b83d-623e897af096",
											"protocolProfileBehavior": {
												"followRedirects": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "response_type",
															"value": "code"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Request for tokens",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus200();\r",
															"\r",
															"// pretend the server responded with an invalid id token\r",
															"const id_token = \"invalidIdToken\";\r",
															"pm.test(\"Invalid id token decoding fails\", () => {\r",
															"    const atob = require('atob');\r",
															"\r",
															"    pm.expect(() => JSON.parse(atob(id_token))).to.throw();\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"id": "4a6b8de1-63a5-4daf-b916-26f5fb8c460f"
													}
												}
											],
											"id": "80f602ef-e680-403b-a585-6367fa934ef2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "{{client_secret}}",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorization_code}}",
															"type": "text"
														}
													]
												},
												"url": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token"
											},
											"response": []
										}
									],
									"id": "a1b1d213-5b6d-4bb9-b1f1-b908a0f1429f",
									"description": "Demonstrates the case where the response might contain an invalid `id_token`. Decoding the id token is expected to fail.\n\nSee the **Tests** tab of the \"Token\" request for the expected errors."
								},
								{
									"name": "Invalid refresh token",
									"item": [
										{
											"name": "Refresh token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus(400);\r",
															"\r",
															"const responseData = pm.response.json();\r",
															"\r",
															"pm.test('Response body has error \"invalid_request\"', () => {\r",
															"    pm.expect(responseData).to.have.property('error', 'invalid_request');\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"id": "a7806180-ba4f-41aa-a169-70ad6bc57e31"
													}
												}
											],
											"id": "6e53520e-7a72-4837-bd27-5cbdba48c8a4",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "refresh_token",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "{{client_secret}}",
															"type": "text"
														},
														{
															"key": "refresh_token",
															"value": "invalidRefreshToken",
															"type": "text"
														}
													]
												},
												"url": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token"
											},
											"response": []
										}
									],
									"id": "7eaa783f-f31e-4697-bf7e-00783ae5be88",
									"description": "Demonstrates the case where the response might contain an invalid `refresh_token`. The post-request script will try to use an invalid refresh token to call the Token endpoint.\n\nSee the **Tests** tab of the \"Token\" request for the expected errors."
								}
							],
							"id": "8e9fa47e-151c-4584-a9f1-fc83a1243a08",
							"description": "Validations for the Token endpoint."
						}
					],
					"id": "296ea56a-6a4c-4c3f-8ae7-bbca10d8f271",
					"description": "Validations for the token endpoint, common to most all of the flows that use the token endpoint; some are similar to the common validations, but the invalid parameter values are present in the token request instead of the authorization request.\n\nThe Token request is the one that's expected to fail; the Authorization request is used to set up the Token request (i.e. obtain the authorization code)."
				},
				{
					"name": "Authorization code flow with PKCE",
					"item": [
						{
							"name": "Authorize",
							"item": [
								{
									"name": "Invalid code challenge method",
									"item": [
										{
											"name": "Authorize",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseData = pm.response.json();\r",
															"\r",
															"pmutils(pm).testCallbacks.testResponseStatus(400);\r",
															"\r",
															"pm.test('Response body has error \"invalid_request\"', () => {\r",
															"    pm.expect(responseData).to.have.property('error', 'invalid_request');\r",
															"});\r",
															"\r",
															"pm.test('Response body has error_description', () => {\r",
															"    pm.expect(responseData).to.have.property('error_description');\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"id": "d330062e-cee1-4ac4-9b88-2c9f2bc133b6"
													}
												}
											],
											"id": "eb5745a4-d417-400a-ad86-f983d398ed46",
											"protocolProfileBehavior": {
												"followRedirects": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&code_challenge=rrsv_GL5iipUGp6yR5w5ra77fdggOxJ6htH9E217PeI&code_challenge_method=invalidCodeChallengeMethod&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "response_type",
															"value": "code"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "code_challenge",
															"value": "rrsv_GL5iipUGp6yR5w5ra77fdggOxJ6htH9E217PeI"
														},
														{
															"key": "code_challenge_method",
															"value": "invalidCodeChallengeMethod"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "64dd9c03-f77e-4409-9209-4076959439bb",
									"description": "Demonstrates the case where the value for the `code_challenge_method` parameter is invalid (i.e. the value is neither `plain` nor `S256`).\n\nSee the **Tests** tab of the \"Authorize\" request for the expected errors."
								}
							],
							"id": "15b1188d-c290-44c1-bb85-129a81adf45d",
							"description": "Validations for the Authorization endpoint."
						},
						{
							"name": "Token",
							"item": [
								{
									"name": "Invalid code verifier",
									"item": [
										{
											"name": "Authorize",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
															"\r",
															"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('query', ({ authorization_code }) => {\r",
															"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"id": "83bff4f4-eeaa-449a-865a-a8174db0bebf"
													}
												}
											],
											"id": "46da993c-4c25-4337-8e0b-dfd6ac579281",
											"protocolProfileBehavior": {
												"followRedirects": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&code_challenge=rrsv_GL5iipUGp6yR5w5ra77fdggOxJ6htH9E217PeI&code_challenge_method=S256&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "response_type",
															"value": "code"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "code_challenge",
															"value": "rrsv_GL5iipUGp6yR5w5ra77fdggOxJ6htH9E217PeI"
														},
														{
															"key": "code_challenge_method",
															"value": "S256"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Request for tokens",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus(400);\r",
															"\r",
															"const responseData = pm.response.json();\r",
															"\r",
															"pm.test('Response body has error \"invalid_request\"', () => {\r",
															"    pm.expect(responseData).to.have.property('error', 'invalid_request');\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {},
														"id": "a083ccbe-d5f5-4ffb-8edb-76dde03df1a4"
													}
												}
											],
											"id": "892b5064-8962-42fe-8a6f-687bbcadb952",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}",
															"type": "text"
														},
														{
															"key": "code_verifier",
															"value": "invalidCodeVerifierMR~lBQbZeIHsG3RnZuvgWmrAr8y1Ia~muw2zBrJdPlz5A7carMvqfm3MxiWCMN7KOjzfbZo0is3FxyWDf6e4Ad0sU6Of10.PvukuaqO2ez~YLU.lCrLYDC4.xDb420z2",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorization_code}}",
															"type": "text"
														}
													]
												},
												"url": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token"
											},
											"response": []
										}
									],
									"id": "686c5313-5383-4f2b-b511-b30c7428209a",
									"description": "Demonstrates the case where the value for the `code_verifier` parameter is invalid (i.e. the code verifier does not match the expected value for the `code_challenge` that was sent as part of the Authorization request).\n\nSee the **Tests** tab of the \"Token\" request for the expected errors."
								}
							],
							"id": "cd6ef473-afbc-4f57-9a99-000b5b751fe3",
							"description": "Validations for the Token endpoint."
						}
					],
					"id": "82048c63-725d-4ce3-8a16-3e6ce785e804",
					"description": "Validations related only to the PCKE extension of the authorization code flow."
				},
				{
					"name": "Implicit Flow + Hybrid Flow",
					"item": [
						{
							"name": "Authorize",
							"item": [
								{
									"name": "User denies consent",
									"item": [
										{
											"name": "Authorize - id_token token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
															"\r",
															"pmutils(pm).postDenyAuthorizeRequest(response => {\r",
															"    const URL = require('url');\r",
															"    const qs = require('querystring');\r",
															"\r",
															"    const responseLocation = response.headers.get('Location');\r",
															"    const url = URL.parse(responseLocation);\r",
															"    const queryStringValue = url.query;\r",
															"    const queryString = qs.parse(queryStringValue);\r",
															"\r",
															"    pm.test(\"Response location has query string parameter \\\"error=access_denied\\\"\", () => {\r",
															"        pm.expect(queryString).to.have.property('error', 'access_denied');\r",
															"    });\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "fb175dd7-718c-475b-ad94-7b7cec25736f"
													}
												}
											],
											"id": "213e0294-dbce-4fea-91ad-fe075703c9b1",
											"protocolProfileBehavior": {
												"followRedirects": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=id_token token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "response_type",
															"value": "id_token token"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "24d2e587-9eca-4caa-bd6a-042d439f2796",
									"description": "These tests demonstrate the case where the user would deny consent, i.e. by clicking the \"Cancel\" button on the consent screen.\n\n<img src=\"https://content.pstmn.io/6258ac22-09a1-4f5b-8ecf-35a397b0c33c/aW1hZ2UucG5n\" width=\"1619\" height=\"924\">\n\nSee the Tests tab of the \"Authorize\" request for the expected errors."
								}
							],
							"id": "33a8af6c-6deb-406d-ac1e-a90d40f4310f",
							"description": "Validations for the Authorization endpoint."
						}
					],
					"id": "3590055f-6d33-4573-83fc-f3a6a037a871",
					"description": "Validations related only to the implicit flow and hybrid flow."
				}
			],
			"id": "cc963083-1e8f-4f40-91ca-440314a8f772",
			"description": "All requests in this folder's subfolders captures cases when your requests could possibly fail. The purpose is to demonstrate the expected error responses in those cases.\n\nThe folders are grouped by flow type.\n\nEach subfolder under a flow type represents a different case why a request would fail.\n\nSee the tests in the **Tests** tab of each request to see what the expected errors are for each case.\n\nFor subfolders that contain both the Authorization request and the Token request, the token request is the one that's expected to fail; the Authorization request is used to set up the Token request (i.e. obtain the authorization code)."
		},
		{
			"name": "Get OIDC metadata",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pmutils(pm).testCallbacks.testResponseStatus(200);\r",
							"\r",
							"const responseData = pm.response.json();\r",
							"\r",
							"const baseTenantOauthUrl = pm.variables.get('CFS Master URL') + '/oauth/' + pm.variables.get('Tenant Name');\r",
							"\r",
							"const expectedIssuer = baseTenantOauthUrl;\r",
							"pm.test('Response has expected issuer', () => {\r",
							"    pm.expect(responseData).to.have.property('issuer', expectedIssuer);\r",
							"});\r",
							"\r",
							"const expectedAuthorizationEndpoint = baseTenantOauthUrl + '/authorize';\r",
							"pm.test('Response has expected authorization_endpoint', () => {\r",
							"    pm.expect(responseData).to.have.property('authorization_endpoint', expectedAuthorizationEndpoint);\r",
							"});\r",
							"\r",
							"const expectedTokenEndpoint = baseTenantOauthUrl + '/token';\r",
							"pm.test('Response has expected token_endpoint', () => {\r",
							"    pm.expect(responseData).to.have.property('token_endpoint', expectedTokenEndpoint);\r",
							"});\r",
							"\r",
							"const expectedTokenEndpointAuthMethodsSupported = [\"client_secret_post\", \"client_secret_basic\"];\r",
							"pm.test('Response has expected token_endpoint_auth_methods_supported', () => {\r",
							"    pm.expect(responseData).to.have.deep.property('token_endpoint_auth_methods_supported', expectedTokenEndpointAuthMethodsSupported);\r",
							"});\r",
							"\r",
							"const expectedUserinfoEndpoint = baseTenantOauthUrl + '/userinfo';\r",
							"pm.test('Response has expected userinfo_endpoint', () => {\r",
							"    pm.expect(responseData).to.have.property('userinfo_endpoint', expectedUserinfoEndpoint);\r",
							"});\r",
							"\r",
							"const expectedResponseTypesSupported = [\"code\", \"token\", \"id_token\", \"id_token token\", \"code id_token\", \"code token\", \"code id_token token\"];\r",
							"pm.test('Response has expected response_types_supported', () => {\r",
							"    pm.expect(responseData).to.have.deep.property('response_types_supported', expectedResponseTypesSupported);\r",
							"});\r",
							"\r",
							"const expectedResponseModesSupported = [\"query\", \"fragment\", \"form_post\"];\r",
							"pm.test('Response has expected response_modes_supported', () => {\r",
							"    pm.expect(responseData).to.have.deep.property('response_modes_supported', expectedResponseModesSupported);\r",
							"});\r",
							"\r",
							"const expectedSubjectTypesSupported = ['public'];\r",
							"pm.test('Response has expected subject_types_supported', () => {\r",
							"    pm.expect(responseData).to.have.deep.property('subject_types_supported', expectedSubjectTypesSupported);\r",
							"});\r",
							"\r",
							"const expectedIdTokenSigningAlgValuesSupported = ['S256'];\r",
							"pm.test('Response has expected id_token_signing_alg_values_supported', () => {\r",
							"    pm.expect(responseData).to.have.deep.property('id_token_signing_alg_values_supported', expectedIdTokenSigningAlgValuesSupported);\r",
							"});\r",
							"\r",
							"const expectedJwksUri = baseTenantOauthUrl + '/.well-known/keys';\r",
							"pm.test('Response has expected jwks_uri', () => {\r",
							"    pm.expect(responseData).to.have.property('jwks_uri', expectedJwksUri);\r",
							"});\r",
							"\r",
							"const expectedScopesSupported = [\"openid\", \"profile\", \"email\", \"address\", \"phone\", \"groups\"];\r",
							"pm.test('Response has expected scopes_supported', () => {\r",
							"    pm.expect(responseData).to.have.deep.property('scopes_supported', expectedScopesSupported);\r",
							"});\r",
							"\r",
							"const expectedClaimsSupported = [\"sub\", \"name\", \"given_name\", \"family_name\", \"middle_name\", \"nickname\", \"preferred_username\", \"profile\", \"picture\", \"website\", \"gender\", \"birthdate\", \"zoneinfo\", \"locale\", \"updated_at\", \"address\", \"email\", \"email_verified\", \"phone_number\", \"phone_number_verified\", \"groups\"];\r",
							"pm.test('Response has expected claims_supported', () => {\r",
							"    pm.expect(responseData).to.have.deep.property('claims_supported', expectedClaimsSupported);\r",
							"});\r",
							"\r",
							"const expectedEndSessionEndpoint = baseTenantOauthUrl + '/endsession';\r",
							"pm.test('Response has expected end_session_endpoint', () => {\r",
							"    pm.expect(responseData).to.have.property('end_session_endpoint', expectedEndSessionEndpoint);\r",
							"});\r",
							"\r",
							"const expectedCheckSessionEndpoint = baseTenantOauthUrl + '/checksession';\r",
							"pm.test('Response has expected check_session_iframe', () => {\r",
							"    pm.expect(responseData).to.have.property('check_session_iframe', expectedCheckSessionEndpoint);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"id": "a63f4a5e-2aeb-4a25-9e37-573b35885f3f"
					}
				}
			],
			"id": "61e40c75-fdde-4fd3-ae8d-0186e21b557a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{CFS Master URL}}/oauth/{{Tenant Name}}/.well-known/openid-configuration",
				"description": "Returns the OpenID provider configuration information, such as supported claims, supported scopes, URLs to other endpoints such as the authorize endpoint, the token endpoint, etc.\n\n[OpenID Connect Discovery 1.0 § 4.2. OpenID Provider Configuration Response](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfigurationResponse)"
			},
			"response": [
				{
					"id": "98466e3f-e927-4279-bd06-b456c3c4696c",
					"name": "Get OIDC metadata",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": "{{CFS Master URL}}/oauth/{{Tenant Name}}/.well-known/openid-configuration"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Cache-Control",
							"value": "private"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/10.0"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "authorization"
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET"
						},
						{
							"key": "Date",
							"value": "Tue, 02 Apr 2024 12:11:21 GMT"
						},
						{
							"key": "Content-Length",
							"value": "1567"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "{\n    \"issuer\": \"https://cfs.example.com/cfs/oauth/stormwind\",\n    \"authorization_endpoint\": \"https://cfs.example.com/cfs/oauth/stormwind/authorize\",\n    \"token_endpoint\": \"https://cfs.example.com/cfs/oauth/stormwind/token\",\n    \"token_endpoint_auth_methods_supported\": [\n        \"client_secret_post\",\n        \"client_secret_basic\"\n    ],\n    \"userinfo_endpoint\": \"https://cfs.example.com/cfs/oauth/stormwind/userinfo\",\n    \"response_types_supported\": [\n        \"code\",\n        \"token\",\n        \"id_token\",\n        \"id_token token\",\n        \"code id_token\",\n        \"code token\",\n        \"code id_token token\"\n    ],\n    \"response_modes_supported\": [\n        \"query\",\n        \"fragment\",\n        \"form_post\"\n    ],\n    \"subject_types_supported\": [\n        \"public\"\n    ],\n    \"id_token_signing_alg_values_supported\": [\n        \"RS256\"\n    ],\n    \"jwks_uri\": \"https://cfs.example.com/cfs/oauth/stormwind/.well-known/keys\",\n    \"scopes_supported\": [\n        \"openid\",\n        \"profile\",\n        \"email\",\n        \"address\",\n        \"phone\",\n        \"groups\"\n    ],\n    \"claims_supported\": [\n        \"sub\",\n        \"name\",\n        \"given_name\",\n        \"family_name\",\n        \"middle_name\",\n        \"nickname\",\n        \"preferred_username\",\n        \"profile\",\n        \"picture\",\n        \"website\",\n        \"gender\",\n        \"birthdate\",\n        \"zoneinfo\",\n        \"locale\",\n        \"updated_at\",\n        \"address\",\n        \"email\",\n        \"email_verified\",\n        \"phone_number\",\n        \"phone_number_verified\",\n        \"groups\"\n    ],\n    \"end_session_endpoint\": \"https://cfs.example.com/cfs/oauth/stormwind/endsession\",\n    \"check_session_iframe\": \"https://cfs.example.com/cfs/oauth/stormwind/checksession\"\n}"
				}
			]
		},
		{
			"name": "Refresh token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pmutils(pm).testCallbacks.testResponseStatus200();\r",
							"\r",
							"const responseData = pm.response.json();\r",
							"\r",
							"pmutils(pm).testCallbacks.testAccessToken(responseData.access_token);\r",
							"\r",
							"pm.collectionVariables.set(\"access_token\", responseData.access_token);\r",
							"pm.collectionVariables.set(\"refresh_token\", responseData.refresh_token);\r",
							"\r",
							"pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(responseData.access_token);\r",
							"pmutils(pm).testCallbacks.testRefreshTokenRefreshesTokens(responseData.refresh_token);\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"id": "60aec0f2-710b-4f13-946b-fa345cdd223d"
					}
				}
			],
			"id": "f8e2a35c-72b6-4267-9888-b2ed1d1c37d8",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "client_id",
							"value": "{{client_id}}",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "refresh_token",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "{{client_secret}}",
							"type": "text"
						},
						{
							"key": "refresh_token",
							"value": "{{refresh_token}}",
							"type": "text"
						}
					]
				},
				"url": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
				"description": "Takes a `refresh_token` and returns a fresh new set of `id_token`, `access_token`, `refresh_token`."
			},
			"response": [
				{
					"id": "e23f9e34-c0fc-4015-b3c3-ab8427a4b8df",
					"name": "Refresh token",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "refresh_token",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								},
								{
									"key": "refresh_token",
									"value": "{{refresh_token}}",
									"type": "text"
								}
							]
						},
						"url": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Content-Length",
							"value": "1248"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/10.0"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "authorization"
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET"
						},
						{
							"key": "Date",
							"value": "Tue, 02 Apr 2024 12:11:45 GMT"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "{\n    \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImQzY2QzMjBlLTJiNjUtNDg3YS05ZGM3LTY3MTY3YWFmMzc2NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIGFkZHJlc3MgcGhvbmUgZ3JvdXBzIiwidG9rZW5fdHlwZSI6ImJlYXJlciIsImNsaWVudF9pZCI6InN0TEp3VzliM0w1QlBhaUZGVng5Y0IiLCJuYmYiOjE3MTIwNTk5MDUsImV4cCI6MTcxMjA2MDAyNSwiaWF0IjoxNzEyMDU5ODE1LCJpc3MiOiJodHRwczovL2Nmcy5leGFtcGxlLmNvbS9jZnMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoiaHR0cHM6Ly9jZnMuZXhhbXBsZS5jb20vY2ZzL29hdXRoL3N0b3Jtd2luZCJ9.eAC6ugqB5tnAsjl8KQRrbE_XJgjlIGZ6zBdEM9hcUymaR_xpfXRA7Ll8oLmATN2lxO5cofdaSuUb6rWPBTWGz1wxITG4CDnNLFsBKZ4qd8ru14jJ87PYEW4CYH-m1cyAiIvVl9SIQxIpUYKgCC6QazwTeguCWVRgr2LKIo1zV-k6UyKqo1D1EYpAflfYtuf6bMaX7H9aXpA8cKAN-AKuTG343luQ8GQKm_G_D7KjqmSbhRky-IueIxmFL1tULAkOHmE3pflflhfxFkJR1gKMpGLUTRSrASFdXqG-o5bKYOaRJYy7AdHXN_Wz_UME4q6sxLQxYDcx6rpBlCly08m5Pw\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 120,\n    \"refresh_token\": \"utYV!IAAAAP_8Bo0mGU4__dCxXMjU4YY6kUmCZp4_DdD9rczbfdP1sQAAAAEt5Q2zknJ1GD69OxZzmQXLiMIJnDbImCURXtYMgzZ5o2rNP-JgSSzA1_Lwua4YmqNQc9gyh9jwkWii3ucs8ajroB2GfjPueE9AsLBE6LcXlECF8B1cIy9f059uTq-Vv7w4muMpsFNMCxcBTEVzeOJkssuD39T933iPv_gYcL60Ogexz4NOazdyteCDUIcrc0VbfqZaYdx_8AS2b5hvwRMEN0yw5TNvwCbP2LJ60QxPTg\",\n    \"scope\": \"openid email profile address phone groups\"\n}"
				}
			]
		},
		{
			"name": "UserInfo endpoint",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pmutils(pm).testCallbacks.testResponseStatus(200);\r",
							"\r",
							"const responseData = pm.response.json();\r",
							"\r",
							"const scopes = `${pm.variables.get('scope')}`.split(' ');\r",
							"\r",
							"const expectedIss = pm.variables.get('CFS Master URL') + '/oauth/' + pm.variables.get('Tenant Name');;\r",
							"pm.test('Response has expected iss', () => {\r",
							"    pm.expect(responseData).to.have.property('iss', expectedIss);\r",
							"});\r",
							"\r",
							"pm.test('Response has sub', () => {\r",
							"    pm.expect(responseData).to.have.property('sub');\r",
							"});\r",
							"\r",
							"const scopesMappings = {\r",
							"    profile: ['name', 'family_name', 'given_name', 'middle_name', 'preferred_username', 'nickname', 'profile', 'picture', 'website', 'gender', 'birthdate', 'zoneinfo', 'locale', 'updated_at'],\r",
							"    email: ['email', 'email_verified'],\r",
							"    address: ['address'],\r",
							"    phone: ['phone_number', 'phone_number_verified'],\r",
							"    groups: ['groups'],\r",
							"};\r",
							"\r",
							"Object.entries(scopesMappings).forEach(([scope, claimNames]) => {\r",
							"    if (scopes.indexOf(scope) !== -1) {\r",
							"        claimNames.forEach((claimName) => {\r",
							"            pm.test(`Response has ${claimName}`, () => {\r",
							"                pm.expect(responseData).to.have.property(claimName);\r",
							"            });\r",
							"        });\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"id": "a61750be-b063-4e5d-b8fd-1ae8dbc9937c"
					}
				}
			],
			"id": "eba8e8cf-7153-4e7a-a336-df460cbc3d95",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{access_token}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{CFS Master URL}}/oauth/{{Tenant Name}}/userinfo",
				"description": "Returns the claims associated with the user's `access_token`; the returned depend on the value of that `scope` parameter used when issuing the token.\n\nClaims with no value are **not** returned.\n\nThe **Tests** expect all claim values to be returned for each scope, so the user would need to have all the associated informations completed in order for all the tests to pass.\n\n**N.B.:** If an access token is obtained using the **Client credentials** flow, the response is empty, since the token is not associated with any user."
			},
			"response": [
				{
					"id": "b410fcae-5eee-4b13-89a6-1e09f5ca018f",
					"name": "UserInfo endpoint",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": "{{CFS Master URL}}/oauth/{{Tenant Name}}/userinfo"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Cache-Control",
							"value": "private"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/10.0"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "authorization"
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET"
						},
						{
							"key": "Date",
							"value": "Tue, 02 Apr 2024 12:12:02 GMT"
						},
						{
							"key": "Content-Length",
							"value": "236"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "{\n    \"iss\": \"https://cfs.example.com/cfs/oauth/stormwind\",\n    \"sub\": \"varian.wrynn\",\n    \"name\": \"Varian Wrynn\",\n    \"family_name\": \"Wrynn\",\n    \"given_name\": \"Varian\",\n    \"email\": \"varian.wrynn@stormwind.zer\",\n    \"email_verified\": true\n}"
				}
			]
		},
		{
			"name": "Get JWT Keys",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pmutils(pm).testCallbacks.testResponseStatus(200);\r",
							"\r",
							"const responseData = pm.response.json();\r",
							"\r",
							"pm.test('Response has valid structure', () => {\r",
							"    pm.expect(responseData).to.have.property('keys');\r",
							"    pm.expect(responseData.keys).to.be.an('Array');\r",
							"\r",
							"    responseData.keys.forEach(key => {\r",
							"        ['kid', 'kty', 'use', 'e', 'n', 'alg'].forEach(property => {\r",
							"            pm.expect(key).to.have.property(property);\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"id": "b3faacab-af8f-4ea3-8e20-519624a25c43"
					}
				}
			],
			"id": "1d5c0780-2d7a-45a6-a19b-3b21b050102a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{CFS Master URL}}/oauth/{{Tenant Name}}/.well-known/keys",
				"description": "Returns the [JWS](https://datatracker.ietf.org/doc/html/rfc7515) keys used to sign the tokens. These keys must be used to [validate the id_token](https://openid.net/specs/openid-connect-core-1_0.html#ImplicitIDTValidation), and/or [validate the access_token](https://openid.net/specs/openid-connect-core-1_0.html#ImplicitTokenValidation) when using the **Implicit flow** or **Hybrid flow**."
			},
			"response": [
				{
					"id": "f6fe6300-67c7-4480-98b2-4747bbd10374",
					"name": "Get JWT Keys",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": "{{CFS Master URL}}/oauth/{{Tenant Name}}/.well-known/keys"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Cache-Control",
							"value": "private"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/10.0"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "authorization"
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET"
						},
						{
							"key": "Date",
							"value": "Tue, 02 Apr 2024 12:12:25 GMT"
						},
						{
							"key": "Content-Length",
							"value": "1349"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "{\n    \"keys\": [\n        {\n            \"kid\": \"76764434-268c-433e-b931-be86f1eb81fb\",\n            \"kty\": \"RSA\",\n            \"use\": \"sig\",\n            \"e\": \"AQAB\",\n            \"n\": \"ltc11OfTqLEorULFz7BHNQ9mDbIt7szzQyLRzlrNHxAlNynz2wnQ7kzA1tlDceJllKTDzf22rQ8Tk7XvVMqWfoEV4eLah_rLRcF14dnCV02myydm9JzaLofd5gTRnwdR1qbtbrVD2-wwC9o5IIC5ub149aklKEWhmeVTD1pjk-v0kqDbn6Bzfc-TUUInYkrkgHRruT1kEHc1c6VVE7fNWkDPFap4Xf2fZn0X4dbSsPY-znjfAFigiDUC5EFNCk6mGTKS-i9pzR-qBzp1XIXAQU831KHLT9VdRV6ghqKwvdDmOV2aN47YhXepsF1Z0-k9k4erCTIIFykw8eQHggd-5Q\",\n            \"alg\": \"RSA256\"\n        },\n        {\n            \"kid\": \"a476ee25-a58e-4ee2-88e4-525c7710690e\",\n            \"kty\": \"RSA\",\n            \"use\": \"sig\",\n            \"e\": \"AQAB\",\n            \"n\": \"uyDNMy0SbWLZjtwxyaSZjUouF2vtKko7qTb2msEo9ll2Uq-rn9OqN22i8SKjkXbo4u02UvJVD2qpcSw9X8qDluQMU3Q5LlqjGZCvrB9otJ9E3OLZOC1PU1cvJ_3VBZXxoJL0GBe0zDKeTE44IuF-uwuP10GbzgnlqxEG7LN18FRLej8kqZthw7i-rGd78C7oiQVuPSmpTSTJb-uBQt8tVotAiZ1tKGZhv71QBehddlE2tcddAGI8hOP8sV3_Uenal2uHCdP50PAHc6xFtXKl1LMwXW17Zj-TNh6BTj3qunHvt1qFyV51tihgsREK2jvPF2oK7c7NKFHvXEW3q9oucQ\",\n            \"alg\": \"RSA256\"\n        },\n        {\n            \"kid\": \"d3cd320e-2b65-487a-9dc7-67167aaf3764\",\n            \"kty\": \"RSA\",\n            \"use\": \"sig\",\n            \"e\": \"AQAB\",\n            \"n\": \"sqSR76TLiPi2uZgL2B5600SfF8tYIf_5mHluskWCyfpDDbYu5wIHAB7faxGSCCvxNK8SLSeqLK_GIT60ZPJrajaWiLrC1haOuMZv1iFqtsRN_HALbF88PDLqLENfz4stA10oHNfj926kPk_zijK-yP785mNpYmiXt7Yit7_gkqTssI9SqjUubhyhmXOrkaih-GesgcXjIIkm9gI6lE8TC5SiH21Rp57t7qDfnOyGS700qyos3lZor1KySG4PB_ubahN6czsSlenEU8SQfEP-Gl2MwyudQERGxKAAEwMAsOygFX30ouoMDi--JOGs4kWN3iIm7ksZD6TGXIQeQY0DJQ\",\n            \"alg\": \"RSA256\"\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Revoke Application Access",
			"id": "64be4858-ae5d-488d-a89a-d3c1c6470cec",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"url": "{{CFS Master URL}}/Portal/Settings/RevokeApplicationAccess/{{Application Id}}",
				"description": "Revokes an application's acess to the user's information, the same way you would revoke it using the web portal.\n\n<img src=\"https://content.pstmn.io/4379fe7c-13b5-4b17-867e-e5a322a9d68f/aW1hZ2UucG5n\" width=\"1619\" height=\"924\">\n\n**N.B.:** In order to use this request, you need to log in the browser, and [synchronize the cookies with Postman](https://learning.postman.com/docs/sending-requests/capturing-request-data/syncing-cookies/)."
			},
			"response": [
				{
					"id": "3ec127d0-4ff2-47c0-8d1f-ff0b0d8b5a46",
					"name": "Revoke Application Access",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": "{{CFS Master URL}}/Portal/Settings/RevokeApplicationAccess/{{Application Id}}"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Cache-Control",
							"value": "private, s-maxage=0"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/10.0"
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET"
						},
						{
							"key": "Date",
							"value": "Tue, 02 Apr 2024 12:12:38 GMT"
						},
						{
							"key": "Content-Length",
							"value": "4"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "true"
				}
			]
		},
		{
			"name": "New Request",
			"id": "8cfa315a-ad77-4c9c-aff7-32f77210bc16",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pmutils =",
					"    /**",
					"     * @param {Postman} pm",
					"     */",
					"    function (pm) {",
					"        return {",
					"            _oAuthVariableNameToCollectionVariableNameMap: Object.freeze({",
					"                access_token: \"access_token\",",
					"                code: \"authorization_code\",",
					"                id_token: \"id_token\",",
					"                refresh_token: \"refresh_token\",",
					"            }),",
					"",
					"            testCallbacks: Object.freeze({",
					"                testAuthorizationCode: (authorization_code) => {",
					"                    pm.test(\"Authorization code is valid\", () => {",
					"                        pm.expect(authorization_code).to.not.be.null;",
					"                        pm.expect(authorization_code).to.not.be.undefined;",
					"                    });",
					"                },",
					"",
					"                testAccessToken: (access_token, { expectedScopes } = {}) => {",
					"                    pm.test(\"Acess token is valid\", () => {",
					"                        pm.expect(access_token).to.not.be.null;",
					"                        pm.expect(access_token).to.not.be.undefined;",
					"",
					"                        const atob = require('atob');",
					"",
					"                        const [jwtHeader, jwtPayload, jwtSignature] = access_token.split('.');",
					"                        const [header, payload] = [jwtHeader, jwtPayload].map(atob).map(JSON.parse);",
					"",
					"                        pm.test(\"Access token has valid \\\"iss\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"iss\");",
					"",
					"                            const URL = require('url');",
					"",
					"                            const iss = payload.iss;",
					"                            const issUrl = URL.parse(iss);",
					"",
					"                            const cfsUrl = URL.parse(",
					"                                pm.variables.get('CFS Master URL') +",
					"                                \"/oauth/\" +",
					"                                pm.variables.get('Tenant Name')",
					"                            );",
					"",
					"                            pm.expect(issUrl.toString()).to.be.equal(cfsUrl.toString());",
					"                        });",
					"",
					"                        pm.test(\"Access token has valid \\\"aud\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"aud\");",
					"",
					"                            const aud = payload.aud;",
					"",
					"                            pm.expect(aud).to.be.equal(pm.variables.get('client_id'));",
					"                        });",
					"",
					"                        pm.test(\"Access token has valid \\\"iat\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"iat\");",
					"",
					"                            const iat = payload.iat;",
					"                            const now = Date.now() / 1000;",
					"",
					"                            pm.expect(iat).to.be.lessThan(now);",
					"                        });",
					"",
					"                        pm.test(\"Access token has valid \\\"exp\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"exp\");",
					"",
					"                            const exp = payload.exp;",
					"                            const now = Date.now() / 1000;",
					"",
					"                            pm.expect(exp).to.be.greaterThan(now);",
					"                        });",
					"",
					"                        pm.test(\"Access token has valid \\\"nbf\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"nbf\");",
					"",
					"                            const nbf = payload.nbf;",
					"                            const now = Date.now() / 1000;",
					"",
					"                            pm.expect(nbf).to.be.lessThan(now);",
					"                        });",
					"",
					"                        pm.test(\"Access token has valid \\\"scope\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"scope\");",
					"",
					"                            if (expectedScopes) {",
					"                                const scopes = payload.scope.split(' ');",
					"                                if (expectedScopes.length !== scopes.length) {",
					"                                    pm.expect.fail(`Expected ${expectedScopes.length} scopes, but got ${scopes.length}`)",
					"                                }",
					"                                for (const scope of scopes) {",
					"                                    if (!expectedScopes.includes(scope)) {",
					"                                        pm.expect.fail(`Scope ${scope} was not expected`);",
					"                                    }",
					"                                }",
					"                            } else {",
					"                                pm.expect(payload.scope).to.be.equal(pm.variables.get('scope'));",
					"                            }",
					"                        });",
					"                    });",
					"                },",
					"",
					"                testAccessTokenGrantsAccessToResources: (access_token) => {",
					"                    pm.test(\"Access token grants access to resources\", () => {",
					"                        pm.sendRequest(",
					"                            {",
					"                                url: pm.variables.get('CFS Master URL') + '/oauth/' + pm.variables.get('Tenant Name') + '/userinfo',",
					"                                method: 'GET',",
					"                                header: {",
					"                                    Authorization: 'Bearer ' + access_token",
					"                                }",
					"                            },",
					"                            (err, response) => {",
					"                                pm.expect(err).to.be.null;",
					"                                if (err) {",
					"                                    console.error(err);",
					"                                    return;",
					"                                }",
					"",
					"                                pm.expect(response.code).to.be.equal(200);",
					"                            }",
					"                        );",
					"                    });",
					"                },",
					"",
					"                testIdToken: (id_token) => {",
					"                    pm.test(\"Id token is valid\", () => {",
					"                        pm.expect(id_token).to.not.be.null;",
					"                        pm.expect(id_token).to.not.be.undefined;",
					"",
					"                        const atob = require('atob');",
					"",
					"                        const [jwtHeader, jwtPayload, jwtSignature] = id_token.split('.');",
					"                        const [header, payload] = [jwtHeader, jwtPayload].map(atob).map(JSON.parse);",
					"",
					"                        pm.test(\"Id token has valid \\\"iss\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"iss\");",
					"",
					"                            const URL = require('url');",
					"",
					"                            const iss = payload.iss;",
					"                            const issUrl = URL.parse(iss);",
					"",
					"                            const cfsUrl = URL.parse(",
					"                                pm.variables.get('CFS Master URL') +",
					"                                \"/oauth/\" +",
					"                                pm.variables.get('Tenant Name')",
					"                            );",
					"",
					"                            pm.expect(issUrl.toString()).to.be.equal(cfsUrl.toString());",
					"                        });",
					"",
					"                        pm.test(\"Id token has valid \\\"aud\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"aud\");",
					"",
					"                            const aud = payload.aud;",
					"",
					"                            pm.expect(aud).to.be.equal(pm.variables.get('client_id'));",
					"                        });",
					"",
					"                        pm.test(\"Id token has valid \\\"iat\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"iat\");",
					"",
					"                            const iat = payload.iat;",
					"                            const now = Date.now() / 1000;",
					"",
					"                            pm.expect(iat).to.be.lessThan(now);",
					"                        });",
					"",
					"                        pm.test(\"Id token has valid \\\"exp\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"exp\");",
					"",
					"                            const exp = payload.exp;",
					"                            const now = Date.now() / 1000;",
					"",
					"                            pm.expect(exp).to.be.greaterThan(now);",
					"                        });",
					"",
					"                        pm.test(\"Id token has valid \\\"nbf\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"nbf\");",
					"",
					"                            const nbf = payload.nbf;",
					"                            const now = Date.now() / 1000;",
					"",
					"                            pm.expect(nbf).to.be.lessThan(now);",
					"                        });",
					"",
					"                        pm.test(\"Id token has valid \\\"nonce\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"nonce\", pm.variables.get(\"nonce\"), null);",
					"                        });",
					"                    });",
					"                },",
					"",
					"                testRefreshTokenRefreshesTokens: (refresh_token) => {",
					"                    pm.sendRequest(",
					"                        {",
					"                            url: pm.variables.get('CFS Master URL') + '/oauth/' + pm.variables.get('Tenant Name') + '/token',",
					"                            method: 'POST',",
					"                            body: {",
					"                                mode: 'urlencoded',",
					"                                urlencoded: [{",
					"                                    key: 'client_id',",
					"                                    value: pm.variables.get('client_id'),",
					"                                    disabled: false,",
					"                                },",
					"                                {",
					"                                    key: 'grant_type',",
					"                                    value: 'refresh_token',",
					"                                    disabled: false,",
					"                                },",
					"                                {",
					"                                    key: 'client_secret',",
					"                                    value: pm.variables.get('client_secret'),",
					"                                    disabled: false,",
					"                                },",
					"                                {",
					"                                    key: 'refresh_token',",
					"                                    value: refresh_token,",
					"                                    disabled: false,",
					"                                }]",
					"                            }",
					"                        },",
					"                        (err, response) => {",
					"                            pm.test(\"Refresh token grants new tokens\", () => {",
					"                                pm.expect(err).to.be.null;",
					"",
					"                                if (err) {",
					"                                    console.error(err);",
					"                                    return;",
					"                                }",
					"",
					"                                pm.expect(response.code).to.be.equal(200);",
					"",
					"                                const responseBody = response.json();",
					"                                pm.expect(responseBody).to.have.property('access_token');",
					"                                pm.expect(responseBody).to.have.property('refresh_token');",
					"                            });",
					"                        }",
					"                    );",
					"                },",
					"",
					"                testResponseStatus200: () => {",
					"                    pm.test(\"Response has status code 200\", () => {",
					"                        pm.expect(pm.response.code).to.be.equal(200);",
					"                    });",
					"                },",
					"",
					"                testResponseStatus200or302: () => {",
					"                    pm.test(\"Response has status code 200 or 302\", () => {",
					"                        pm.expect(pm.response.code).to.be.oneOf([200, 302]);",
					"                    });",
					"                },",
					"",
					"                /**",
					"                 * @param {number} statusCode",
					"                 */",
					"                testResponseStatus: (statusCode) => {",
					"                    pm.test(`Response has status code ${statusCode}`, () => {",
					"                        pm.expect(pm.response.code).to.be.equal(statusCode);",
					"                    });",
					"                },",
					"            }),",
					"",
					"            /**",
					"             * @param {require('postman-collection').Response} response",
					"             */",
					"            extractPostAuthorizeRequestBodyFromResponse(response) {",
					"                const cheerio = require('cheerio');",
					"",
					"                const $ = cheerio.load(response.text());",
					"                const $form = $(\"form\");",
					"",
					"                const targetUrl = $form.attr('action');",
					"                const isLoginRequired = targetUrl.endsWith('/authorizelogin');",
					"",
					"                const requestBody = {",
					"                    ...{",
					"                        __RequestVerificationToken: $form.find('input[name=\"__RequestVerificationToken\"]').attr('value'),",
					"                        IsApproved: true,",
					"                        client_id: $form.find('input[name=\"client_id\"]').attr('value'),",
					"                        redirect_uri: $form.find('input[name=\"redirect_uri\"]').attr('value'),",
					"                        state: $form.find('input[name=\"state\"]').attr('value'),",
					"                        scope: $form.find('input[name=\"scope\"]').attr('value'),",
					"                        response_type: $form.find('input[name=\"response_type\"]').attr('value'),",
					"                        response_mode: $form.find('input[name=\"response_mode\"]').attr('value'),",
					"                        nonce: $form.find('input[name=\"nonce\"]').attr('value'),",
					"                        code_challenge: $form.find('input[name=\"code_challenge\"]').attr('value'),",
					"                        code_challenge_method: $form.find('input[name=\"code_challenge_method\"]').attr('value'),",
					"                    },",
					"                    ...(isLoginRequired ? {",
					"                        Username: pm.variables.get('username'),",
					"                        Password: pm.variables.get('password'),",
					"                    } : {})",
					"                };",
					"",
					"                return requestBody;",
					"            },",
					"",
					"            /**",
					"             * @param {require('postman-collection').Response} response",
					"             * @param {'form' | 'hash' | 'query'} urlQueryExtractionMode",
					"             */",
					"            extractTokenVariablesFromResponse(response, urlQueryExtractionMode) {",
					"                switch (urlQueryExtractionMode) {",
					"                    case 'form':",
					"                        return this.extractTokenVariablesFromResponseBodyForm(response);",
					"                    case 'hash':",
					"                        return this.extractTokenVariablesFromResponseLocationHash(response);",
					"                    default:",
					"                    case 'query':",
					"                        return this.extractTokenVariablesFromResponseLocationQuery(response);",
					"                }",
					"            },",
					"",
					"            /**",
					"             * @param {require('postman-collection').Response} response",
					"             */",
					"            extractTokenVariablesFromResponseBodyForm(response) {",
					"                const cheerio = require('cheerio');",
					"                const lodash = require('lodash');",
					"",
					"                const $ = cheerio.load(response.text());",
					"",
					"                const variablesMap = lodash(this._oAuthVariableNameToCollectionVariableNameMap)",
					"                    .chain()",
					"                    .map((collectionVariableName, oAuthVariableName) => ({",
					"                        [collectionVariableName]: $(`input[name=\"${oAuthVariableName}\"]`).attr('value')",
					"                    }))",
					"                    .reduce(lodash.merge, {})",
					"                    .pickBy(value => !!value)",
					"                    .value()",
					"",
					"                return variablesMap;",
					"            },",
					"",
					"            /**",
					"             * @param {require('postman-collection').Response} response",
					"             */",
					"            extractTokenVariablesFromResponseLocationHash(response) {",
					"                const URL = require('url');",
					"",
					"                const responseLocation = response.headers.get('Location');",
					"                const url = URL.parse(responseLocation);",
					"                const queryStringValue = url.hash.split('#')[1];",
					"",
					"                return this.extractTokenVariablesFromQueryString(queryStringValue);",
					"            },",
					"",
					"            /**",
					"             * @param {require('postman-collection').Response} response",
					"             */",
					"            extractTokenVariablesFromResponseLocationQuery(response) {",
					"                const URL = require('url');",
					"",
					"                const responseLocation = response.headers.get('Location');",
					"                const url = URL.parse(responseLocation);",
					"                const queryStringValue = url.query;",
					"",
					"                return this.extractTokenVariablesFromQueryString(queryStringValue);",
					"            },",
					"",
					"            /**",
					"             * @param {string} queryStringValue",
					"             */",
					"            extractTokenVariablesFromQueryString(queryStringValue) {",
					"                const qs = require('querystring');",
					"",
					"                const queryString = qs.parse(queryStringValue);",
					"                const variablesMap = Object.entries(this._oAuthVariableNameToCollectionVariableNameMap)",
					"                    .filter(([oAuthVariableName]) => !!queryString[oAuthVariableName])",
					"                    .map(([oAuthVariableName, collectionVariableName]) => ({ [collectionVariableName]: queryString[oAuthVariableName] }))",
					"                    .reduce((x, y) => ({ ...x, ...y }), {});",
					"",
					"                return variablesMap;",
					"            },",
					"",
					"            /**",
					"             * @param {'form' | 'hash' | 'query'} urlQueryExtractionMode",
					"             * @param {(variablesMap: object) => void} callback",
					"             */",
					"            postConfirmAuthorizeRequestIfNecessaryThenSetTokens(urlQueryExtractionMode = 'query', callback = null) {",
					"                if (!callback) {",
					"                    callback = () => { };",
					"                }",
					"",
					"                const locationHeaderValue = pm.response.headers.get('Location');",
					"                if (!locationHeaderValue) {",
					"                    const $ = cheerio.load(pm.response.text());",
					"                    const $form = $(\"form\");",
					"",
					"                    const URL = require('url');",
					"                    const cfsMasterUrl = URL.parse(pm.variables.get('CFS Master URL'));",
					"                    const targetUrl = `${cfsMasterUrl.protocol}//${cfsMasterUrl.host}` + $form.attr('action');",
					"",
					"                    const requestBody = this.extractPostAuthorizeRequestBodyFromResponse(pm.response);",
					"",
					"                    pm.sendRequest(",
					"                        {",
					"                            url: targetUrl,",
					"                            method: 'POST',",
					"                            body: {",
					"                                mode: 'urlencoded',",
					"                                urlencoded: Object",
					"                                    .entries(requestBody)",
					"                                    .map(([key, value]) => ({",
					"                                        key: key,",
					"                                        value: value,",
					"                                        disabled: false,",
					"                                    }))",
					"                            }",
					"                        },",
					"                        (err, response) => {",
					"                            if (err) {",
					"                                console.error(err);",
					"                                return;",
					"                            }",
					"",
					"                            const variablesMap = this.extractTokenVariablesFromResponse(response, urlQueryExtractionMode);",
					"                            this.setCollectionVariables(variablesMap);",
					"                            this.setVisualizer(variablesMap);",
					"",
					"                            callback(variablesMap);",
					"                        }",
					"                    );",
					"                } else {",
					"                    const variablesMap = this.extractTokenVariablesFromResponse(pm.response, urlQueryExtractionMode);",
					"                    this.setCollectionVariables(variablesMap);",
					"                    this.setVisualizer(variablesMap);",
					"",
					"                    callback(variablesMap);",
					"                }",
					"            },",
					"",
					"            /**",
					"             * @param {'form' | 'hash' | 'query'} urlQueryExtractionMode",
					"             * @param {(response: require('postman-collection').Response) => void} callback",
					"             */",
					"            postDenyAuthorizeRequest(callback = null) {",
					"                if (!callback) {",
					"                    callback = () => { };",
					"                }",
					"",
					"                const $ = cheerio.load(pm.response.text());",
					"                const $form = $(\"form\");",
					"",
					"                const targetUrl = $form.attr('action');",
					"",
					"                const requestBody =",
					"                {",
					"                    ...this.extractPostAuthorizeRequestBodyFromResponse(pm.response),",
					"                    IsApproved: false,",
					"                };",
					"",
					"                pm.sendRequest(",
					"                    {",
					"                        url: pm.variables.get('CFS Master URL') + targetUrl,",
					"                        method: 'POST',",
					"                        body: {",
					"                            mode: 'urlencoded',",
					"                            urlencoded: Object",
					"                                .entries(requestBody)",
					"                                .map(([key, value]) => ({",
					"                                    key: key,",
					"                                    value: value,",
					"                                    disabled: false,",
					"                                }))",
					"                        }",
					"                    },",
					"                    (err, response) => {",
					"                        if (err) {",
					"                            console.error(err);",
					"                            return;",
					"                        }",
					"",
					"                        callback(response);",
					"                    }",
					"                );",
					"            },",
					"",
					"            /**",
					"             * @param {object} variablesMap",
					"             */",
					"            setCollectionVariables(variablesMap) {",
					"                Object.entries(variablesMap)",
					"                    .forEach(([collectionVariableName, value]) => pm.collectionVariables.set(collectionVariableName, value));",
					"            },",
					"",
					"            /**",
					"             * @param {object} data",
					"             */",
					"            setVisualizer(data) {",
					"                console.log(data);",
					"                const tableTemplate = `",
					"                    <div style=\"overflow-wrap: break-word;\">",
					"                        ${Object.keys(data).map(key => `<div class=\"row\" style=\"margin-bottom: 1rem;\"><div class=\"two columns\">${key}</div><div class=\"ten columns\">{{${key}}}</div></div>`).reduce((x, y) => x + y)}",
					"                    </div>",
					"                    `.trim();",
					"                pm.visualizer.set(tableTemplate, data);",
					"            },",
					"        };",
					"    }",
					""
				],
				"id": "e457b0c7-307b-4cee-a5aa-3db5b9ebb492"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "1c6e7605-80f0-42b3-b0a0-e41fdaead946"
			}
		}
	],
	"variable": [
		{
			"key": "CFS Master URL",
			"value": "https://cfs01.example.com/cfs",
			"type": "string"
		},
		{
			"key": "Tenant Name",
			"value": "mytenant",
			"type": "string"
		},
		{
			"key": "Application Id",
			"value": "1f734c83-3ca4-433e-bfb0-27bc711f3b4e",
			"type": "string"
		},
		{
			"key": "username",
			"value": "john.doe@example.com",
			"type": "string"
		},
		{
			"key": "resource_owner_password_credentials_username",
			"value": "john.doe",
			"type": "string"
		},
		{
			"key": "password",
			"value": "MyPassword123!",
			"type": "string"
		},
		{
			"key": "client_id",
			"value": "stLJwW9b3L5BPaiFFVx9cB",
			"type": "string"
		},
		{
			"key": "client_secret",
			"value": "jqvQwFVQgK92xRg4D1DryiiO7F3X5Hl6UeYZE4fZUQ95",
			"type": "string"
		},
		{
			"key": "scope",
			"value": "openid email profile",
			"type": "string"
		},
		{
			"key": "state",
			"value": "6879bf2ef296d720f3a54eb8faabee9c",
			"type": "string"
		},
		{
			"key": "nonce",
			"value": "c4fdef35f2e05abe2ceb88ae0f743ee4",
			"type": "string"
		},
		{
			"key": "redirect_uri",
			"value": "https://oauth.pstmn.io/v1/callback",
			"type": "string"
		},
		{
			"key": "code_challenge",
			"value": "rrsv_GL5iipUGp6yR5w5ra77fdggOxJ6htH9E217PeI",
			"type": "string"
		},
		{
			"key": "code_verifier",
			"value": "MR~lBQbZeIHsG3RnZuvgWmrAr8y1Ia~muw2zBrJdPlz5A7carMvqfm3MxiWCMN7KOjzfbZo0is3FxyWDf6e4Ad0sU6Of10.PvukuaqO2ez~YLU.lCrLYDC4.xDb420z2",
			"type": "string"
		},
		{
			"key": "code_method",
			"value": "S256",
			"type": "string"
		},
		{
			"key": "validations_common_response_type",
			"value": "code",
			"type": "string"
		},
		{
			"key": "authorization_code",
			"value": "",
			"type": "string"
		},
		{
			"key": "id_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "refresh_token",
			"value": "",
			"type": "string"
		}
	]
}